{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SpringBoot\u7f16\u7a0b\u624b\u518c \u5728\u5b98\u65b9\u6587\u6863\u57fa\u7840\u4e0a\u7ed3\u5408\u5b9e\u9645\u5f00\u53d1\u6574\u7406\u7684\u4e00\u4e9b\u5feb\u901f\u4e0a\u624b\u7684\u6280\u5de7 \u672c\u624b\u518c\u4f1a\u6839\u636eSpringBoot\u7248\u672c\u8fed\u4ee3\u6765\u4e0d\u5b9a\u671f\u66f4\u65b0\uff0c\u6b22\u8fce\u5927\u5bb6\u4e92\u76f8\u4ea4\u6d41SpringBoot\u5f00\u53d1\u6280\u5de7","title":"Home"},{"location":"#springboot","text":"","title":"SpringBoot\u7f16\u7a0b\u624b\u518c"},{"location":"#_1","text":"","title":"\u5728\u5b98\u65b9\u6587\u6863\u57fa\u7840\u4e0a\u7ed3\u5408\u5b9e\u9645\u5f00\u53d1\u6574\u7406\u7684\u4e00\u4e9b\u5feb\u901f\u4e0a\u624b\u7684\u6280\u5de7"},{"location":"#springbootspringboot","text":"","title":"\u672c\u624b\u518c\u4f1a\u6839\u636eSpringBoot\u7248\u672c\u8fed\u4ee3\u6765\u4e0d\u5b9a\u671f\u66f4\u65b0\uff0c\u6b22\u8fce\u5927\u5bb6\u4e92\u76f8\u4ea4\u6d41SpringBoot\u5f00\u53d1\u6280\u5de7"},{"location":"about/","text":"\u5173\u4e8e\u672c\u7ad9","title":"About"},{"location":"about/#_1","text":"","title":"\u5173\u4e8e\u672c\u7ad9"},{"location":"logback/","text":"SpringBoot\u9ed8\u8ba4\u65e5\u5fd7\u6846\u67b6logback\u5e38\u7528\u914d\u7f6e logback-spring.xml\u65b9\u5f0f\u914d\u7f6e <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <!--\u4e3a\u4e86\u9632\u6b62\u8fdb\u7a0b\u9000\u51fa\u65f6\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4e22\u5931\uff0c\u8bf7\u52a0\u4e0a\u6b64\u9009\u9879--> <shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/> <!-- \u5f15\u5165 Spring Boot \u9ed8\u8ba4\u7684 logback XML \u914d\u7f6e\u6587\u4ef6 --> <include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/> <!-- \u63a7\u5236\u53f0 Appender --> <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\"> <!-- \u65e5\u5fd7\u7684\u683c\u5f0f\u5316 --> <encoder> <!-- CONSOLE_LOG_PATTERN \u662f Spring Boot \u9ed8\u8ba4\u7684 logback \u914d\u7f6e defaults.xml\u91cc\u5b9a\u4e49\u7684\u65e5\u5fd7\u683c\u5f0f --> <!-- <pattern>${CONSOLE_LOG_PATTERN}</pattern>--> <pattern> %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%thread]){faint} %clr(%-40.40logger{39}){cyan} : %line - %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} </pattern> <charset>utf8</charset> </encoder> </appender> <!-- \u4ece Spring Boot \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u8bfb\u53d6 spring.application.name \u5e94\u7528\u540d --> <springProperty name=\"applicationName\" scope=\"context\" source=\"spring.application.name\"/> <!-- \u65e5\u5fd7\u6587\u4ef6\u7684\u8def\u5f84 --> <property name=\"LOG_FILE\" value=\"logs/${applicationName}.log\"/> <!-- \u65e5\u5fd7\u6587\u4ef6 Appender --> <appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> <file>${LOG_FILE}</file> <!--\u6eda\u52a8\u7b56\u7565\uff0c\u57fa\u4e8e\u65f6\u95f4 + \u5927\u5c0f\u7684\u5206\u5305\u7b56\u7565 --> <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"> <fileNamePattern>%d{yyyy-MM-dd}.%i.${LOG_FILE}.gz</fileNamePattern> <!--\u65e5\u5fd7\u6587\u4ef6\u4fdd\u7559\u5929\u6570--> <maxHistory>2</maxHistory> <!-- \u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\u6700\u5927\u9650\u5b9a100MB --> <maxFileSize>50MB</maxFileSize> </rollingPolicy> <!-- \u65e5\u5fd7\u7684\u683c\u5f0f\u5316 --> <encoder> <!-- <pattern>${FILE_LOG_PATTERN}</pattern>--> <!-- FILE_LOG_PATTERN \u662f Spring Boot \u9ed8\u8ba4\u7684 logback \u914d\u7f6e defaults.xml\u91cc\u5b9a\u4e49\u7684\u65e5\u5fd7\u683c\u5f0f --> <!-- \u9ed8\u8ba4\u7684 pattern\u683c\u5f0f\u4e0d\u4f1a\u663e\u793a\u4ee3\u7801\u884c\u53f7,\u8fd9\u91cc\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684pattern --> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%thread] %-40.40logger{39} : %line - : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} </pattern> <charset>utf8</charset> </encoder> </appender> <!-- \u8bbe\u7f6e Appender ,\u65e5\u5fd7\u7684\u8f93\u51fa\u4f4d\u7f6e --> <root level=\"info\"> <!-- \u63a7\u5236\u53f0\u8f93\u51fa --> <appender-ref ref=\"console\"/> <!-- *.log\u6587\u4ef6\u8f93\u51fa --> <appender-ref ref=\"file\"/> </root> </configuration>","title":"logback\u65e5\u5fd7\u6253\u5370\u914d\u7f6e"},{"location":"logback/#springbootlogback","text":"logback-spring.xml\u65b9\u5f0f\u914d\u7f6e <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <!--\u4e3a\u4e86\u9632\u6b62\u8fdb\u7a0b\u9000\u51fa\u65f6\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4e22\u5931\uff0c\u8bf7\u52a0\u4e0a\u6b64\u9009\u9879--> <shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/> <!-- \u5f15\u5165 Spring Boot \u9ed8\u8ba4\u7684 logback XML \u914d\u7f6e\u6587\u4ef6 --> <include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/> <!-- \u63a7\u5236\u53f0 Appender --> <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\"> <!-- \u65e5\u5fd7\u7684\u683c\u5f0f\u5316 --> <encoder> <!-- CONSOLE_LOG_PATTERN \u662f Spring Boot \u9ed8\u8ba4\u7684 logback \u914d\u7f6e defaults.xml\u91cc\u5b9a\u4e49\u7684\u65e5\u5fd7\u683c\u5f0f --> <!-- <pattern>${CONSOLE_LOG_PATTERN}</pattern>--> <pattern> %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%thread]){faint} %clr(%-40.40logger{39}){cyan} : %line - %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} </pattern> <charset>utf8</charset> </encoder> </appender> <!-- \u4ece Spring Boot \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u8bfb\u53d6 spring.application.name \u5e94\u7528\u540d --> <springProperty name=\"applicationName\" scope=\"context\" source=\"spring.application.name\"/> <!-- \u65e5\u5fd7\u6587\u4ef6\u7684\u8def\u5f84 --> <property name=\"LOG_FILE\" value=\"logs/${applicationName}.log\"/> <!-- \u65e5\u5fd7\u6587\u4ef6 Appender --> <appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> <file>${LOG_FILE}</file> <!--\u6eda\u52a8\u7b56\u7565\uff0c\u57fa\u4e8e\u65f6\u95f4 + \u5927\u5c0f\u7684\u5206\u5305\u7b56\u7565 --> <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"> <fileNamePattern>%d{yyyy-MM-dd}.%i.${LOG_FILE}.gz</fileNamePattern> <!--\u65e5\u5fd7\u6587\u4ef6\u4fdd\u7559\u5929\u6570--> <maxHistory>2</maxHistory> <!-- \u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\u6700\u5927\u9650\u5b9a100MB --> <maxFileSize>50MB</maxFileSize> </rollingPolicy> <!-- \u65e5\u5fd7\u7684\u683c\u5f0f\u5316 --> <encoder> <!-- <pattern>${FILE_LOG_PATTERN}</pattern>--> <!-- FILE_LOG_PATTERN \u662f Spring Boot \u9ed8\u8ba4\u7684 logback \u914d\u7f6e defaults.xml\u91cc\u5b9a\u4e49\u7684\u65e5\u5fd7\u683c\u5f0f --> <!-- \u9ed8\u8ba4\u7684 pattern\u683c\u5f0f\u4e0d\u4f1a\u663e\u793a\u4ee3\u7801\u884c\u53f7,\u8fd9\u91cc\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684pattern --> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%thread] %-40.40logger{39} : %line - : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} </pattern> <charset>utf8</charset> </encoder> </appender> <!-- \u8bbe\u7f6e Appender ,\u65e5\u5fd7\u7684\u8f93\u51fa\u4f4d\u7f6e --> <root level=\"info\"> <!-- \u63a7\u5236\u53f0\u8f93\u51fa --> <appender-ref ref=\"console\"/> <!-- *.log\u6587\u4ef6\u8f93\u51fa --> <appender-ref ref=\"file\"/> </root> </configuration>","title":"SpringBoot\u9ed8\u8ba4\u65e5\u5fd7\u6846\u67b6logback\u5e38\u7528\u914d\u7f6e"},{"location":"tutorial/","text":"jdk\u548cmaven\u73af\u5883 idea-java\u5f00\u53d1\u5de5\u5177","title":"IDE\u73af\u5883"},{"location":"tutorial/#jdkmaven","text":"","title":"jdk\u548cmaven\u73af\u5883"},{"location":"tutorial/#idea-java","text":"","title":"idea-java\u5f00\u53d1\u5de5\u5177"},{"location":"usage/","text":"\u5728\u7ebf\u6784\u5efaspringboot\u9879\u76ee \u5b98\u65b9\u63d0\u4f9b\u7684\u5728\u7ebf\u6784\u5efa\u7f51\u7ad9 spring initializr alibaba\u63d0\u4f9b\u7684\u5728\u7ebf\u6784\u5efa\u7f51\u7ad9 alibaba spring initializr","title":"\u6784\u5efaSpringBoot"},{"location":"usage/#springboot","text":"","title":"\u5728\u7ebf\u6784\u5efaspringboot\u9879\u76ee"},{"location":"usage/#_1","text":"spring initializr","title":"\u5b98\u65b9\u63d0\u4f9b\u7684\u5728\u7ebf\u6784\u5efa\u7f51\u7ad9"},{"location":"usage/#alibaba","text":"alibaba spring initializr","title":"alibaba\u63d0\u4f9b\u7684\u5728\u7ebf\u6784\u5efa\u7f51\u7ad9"},{"location":"third/iptool/","text":"\u6839\u636eIP\u5b9a\u4f4d\u5730\u7406\u4f4d\u7f6e \u4f7f\u7528ip2region\u67e5\u8be2IP\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e 1.\u9996\u5148\u9879\u76ee\u5f15\u5165maven\u4f9d\u8d56 <dependency> <groupId>org.lionsoul</groupId> <artifactId>ip2region</artifactId> <version>1.7.2</version> </dependency> 2.\u4e0b\u8f7dIP\u5e93\u6587\u4ef6(ip2region.db) \u4e0b\u8f7d\u5730\u5740 3.\u628a ip2region.db \u590d\u5236\u5230 maven \u9879\u76ee\u7684 resources \u76ee\u5f55\u4e0b 4.\u4ee3\u7801\u4f7f\u7528ip2region import java.io.File; import java.lang.reflect.Method; import org.lionsoul.ip2region.DataBlock; import org.lionsoul.ip2region.DbConfig; import org.lionsoul.ip2region.DbSearcher; import org.lionsoul.ip2region.Util; /** * @author wy126 */ public class Ip2RegionUtil { public static String getCityInfo(String ip) { //db String dbPath = Ip2RegionUtil.class.getResource(\"/ip2region.db\").getPath(); File file = new File(dbPath); if (!file.exists()) { System.out.println(\"Error: Invalid ip2region.db file\"); } try { DbConfig config = new DbConfig(); DbSearcher searcher = new DbSearcher(config, dbPath); Method method = null; method = searcher.getClass().getMethod(\"btreeSearch\", String.class); DataBlock dataBlock = null; if (!Util.isIpAddress(ip)) { System.out.println(\"Error: Invalid ip address\"); } dataBlock = (DataBlock) method.invoke(searcher, ip); return dataBlock.getRegion(); } catch (Exception e) { e.printStackTrace(); } return null; } } \u8c03\u7528\u7b2c\u4e09\u65b9API\u83b7\u53d6IP\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e \u592a\u5e73\u6d0b\u7f51\u7edcIP\u5730\u5740\u67e5\u8be2 \u6dd8\u5b9dIP\u5730\u5740\u5e93","title":"IP\u5b9a\u4f4d\u5730\u7406\u4f4d\u7f6e"},{"location":"third/iptool/#ip","text":"","title":"\u6839\u636eIP\u5b9a\u4f4d\u5730\u7406\u4f4d\u7f6e"},{"location":"third/iptool/#ip2regionip","text":"1.\u9996\u5148\u9879\u76ee\u5f15\u5165maven\u4f9d\u8d56 <dependency> <groupId>org.lionsoul</groupId> <artifactId>ip2region</artifactId> <version>1.7.2</version> </dependency> 2.\u4e0b\u8f7dIP\u5e93\u6587\u4ef6(ip2region.db) \u4e0b\u8f7d\u5730\u5740 3.\u628a ip2region.db \u590d\u5236\u5230 maven \u9879\u76ee\u7684 resources \u76ee\u5f55\u4e0b 4.\u4ee3\u7801\u4f7f\u7528ip2region import java.io.File; import java.lang.reflect.Method; import org.lionsoul.ip2region.DataBlock; import org.lionsoul.ip2region.DbConfig; import org.lionsoul.ip2region.DbSearcher; import org.lionsoul.ip2region.Util; /** * @author wy126 */ public class Ip2RegionUtil { public static String getCityInfo(String ip) { //db String dbPath = Ip2RegionUtil.class.getResource(\"/ip2region.db\").getPath(); File file = new File(dbPath); if (!file.exists()) { System.out.println(\"Error: Invalid ip2region.db file\"); } try { DbConfig config = new DbConfig(); DbSearcher searcher = new DbSearcher(config, dbPath); Method method = null; method = searcher.getClass().getMethod(\"btreeSearch\", String.class); DataBlock dataBlock = null; if (!Util.isIpAddress(ip)) { System.out.println(\"Error: Invalid ip address\"); } dataBlock = (DataBlock) method.invoke(searcher, ip); return dataBlock.getRegion(); } catch (Exception e) { e.printStackTrace(); } return null; } }","title":"\u4f7f\u7528ip2region\u67e5\u8be2IP\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e"},{"location":"third/iptool/#apiip","text":"\u592a\u5e73\u6d0b\u7f51\u7edcIP\u5730\u5740\u67e5\u8be2 \u6dd8\u5b9dIP\u5730\u5740\u5e93","title":"\u8c03\u7528\u7b2c\u4e09\u65b9API\u83b7\u53d6IP\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e"},{"location":"third/jasypt/","text":"jasypt","title":"SpringBoot\u914d\u7f6e\u6587\u4ef6\u52a0\u5bc6\u5de5\u5177"},{"location":"third/jasypt/#jasypt","text":"","title":"jasypt"},{"location":"third/zktool/","text":"Curator Curator \u662f Netflix \u516c\u53f8\u5f00\u6e90\u7684\u4e00\u5957 Zookeeper \u5ba2\u6237\u7aef\u6846\u67b6,Curator \u63d0\u4f9b\u4e86\u4e00\u5957\u6613\u7528\u6027\u548c\u53ef\u8bfb\u6027\u66f4\u5f3a\u7684 Fluent \u98ce\u683c\u7684\u5ba2\u6237\u7aef API \uff0c\u8fd8\u63d0\u4f9b\u4e86 Zookeeper \u5404\u79cd\u5e94\u7528\u573a\u666f\u7684\u62bd\u8c61\u5c01\u88c5\uff0c\u6bd4\u5982\uff1a\u5206\u5e03\u5f0f\u9501\u670d\u52a1\u3001\u96c6\u7fa4\u9886\u5bfc\u9009\u4e3e\u3001\u5171\u4eab\u8ba1\u6570\u5668\u3001\u7f13\u5b58\u673a\u5236\u3001\u5206\u5e03\u5f0f\u961f\u5217\u7b49 POM\u914d\u7f6e <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-framework</artifactId> <version>5.1.0</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-recipes</artifactId> <version>5.1.0</version> </dependency> properties\u914d\u7f6e # Zookeeper \u5730\u5740 #curator.connectString=192.168.0.77:2181,192.168.0.88:2181,192.168.0.88:2181 curator.connectString=127.0.0.1:2181 # \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4 curator.sessionTimeoutMs=5000 # \u547d\u540d\u7a7a\u95f4\uff0c\u5f53\u524d\u5ba2\u6237\u7aef\u7684\u7236\u8282\u70b9,\u82e5\u6ca1\u6709imooc\u8fd9\u4e2aNode\uff0c\u5219\u672c\u9879\u76ee\u542f\u52a8\u65f6\u4f1a\u81ea\u52a8\u521b\u5efa\u8fd9\u4e2aNode curator.namespace=imooc \u5728CommandLineRunner\u4e2d\u6253\u5370imooc\u8fd9\u4e2aNode\u4e0b\u7684\u6240\u6709\u7ed3\u70b9 package com.example.test22; import java.util.List; import org.apache.curator.framework.CuratorFramework; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.CommandLineRunner; import org.springframework.stereotype.Component; import lombok.extern.slf4j.Slf4j; @Slf4j @Component public class TestRunner implements CommandLineRunner { @Autowired private CuratorService curatorService; @Override public void run(String... args) throws Exception { // \u83b7\u53d6\u5ba2\u6237\u7aef CuratorFramework curatorClient = curatorService.getCuratorClient(); // \u5f00\u542f\u4f1a\u8bdd curatorClient.start(); // \u67e5\u8be2\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5b50\u8282\u70b9 List<String> strings = curatorClient.getChildren().forPath(\"/\"); log.warn(String.valueOf(strings)); curatorClient.close(); } }","title":"ZooKeeper\u64cd\u4f5c\u5de5\u5177"},{"location":"third/zktool/#curator","text":"Curator \u662f Netflix \u516c\u53f8\u5f00\u6e90\u7684\u4e00\u5957 Zookeeper \u5ba2\u6237\u7aef\u6846\u67b6,Curator \u63d0\u4f9b\u4e86\u4e00\u5957\u6613\u7528\u6027\u548c\u53ef\u8bfb\u6027\u66f4\u5f3a\u7684 Fluent \u98ce\u683c\u7684\u5ba2\u6237\u7aef API \uff0c\u8fd8\u63d0\u4f9b\u4e86 Zookeeper \u5404\u79cd\u5e94\u7528\u573a\u666f\u7684\u62bd\u8c61\u5c01\u88c5\uff0c\u6bd4\u5982\uff1a\u5206\u5e03\u5f0f\u9501\u670d\u52a1\u3001\u96c6\u7fa4\u9886\u5bfc\u9009\u4e3e\u3001\u5171\u4eab\u8ba1\u6570\u5668\u3001\u7f13\u5b58\u673a\u5236\u3001\u5206\u5e03\u5f0f\u961f\u5217\u7b49","title":"Curator"},{"location":"third/zktool/#pom","text":"<dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-framework</artifactId> <version>5.1.0</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-recipes</artifactId> <version>5.1.0</version> </dependency>","title":"POM\u914d\u7f6e"},{"location":"third/zktool/#properties","text":"# Zookeeper \u5730\u5740 #curator.connectString=192.168.0.77:2181,192.168.0.88:2181,192.168.0.88:2181 curator.connectString=127.0.0.1:2181 # \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4 curator.sessionTimeoutMs=5000 # \u547d\u540d\u7a7a\u95f4\uff0c\u5f53\u524d\u5ba2\u6237\u7aef\u7684\u7236\u8282\u70b9,\u82e5\u6ca1\u6709imooc\u8fd9\u4e2aNode\uff0c\u5219\u672c\u9879\u76ee\u542f\u52a8\u65f6\u4f1a\u81ea\u52a8\u521b\u5efa\u8fd9\u4e2aNode curator.namespace=imooc","title":"properties\u914d\u7f6e"},{"location":"third/zktool/#commandlinerunnerimoocnode","text":"package com.example.test22; import java.util.List; import org.apache.curator.framework.CuratorFramework; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.CommandLineRunner; import org.springframework.stereotype.Component; import lombok.extern.slf4j.Slf4j; @Slf4j @Component public class TestRunner implements CommandLineRunner { @Autowired private CuratorService curatorService; @Override public void run(String... args) throws Exception { // \u83b7\u53d6\u5ba2\u6237\u7aef CuratorFramework curatorClient = curatorService.getCuratorClient(); // \u5f00\u542f\u4f1a\u8bdd curatorClient.start(); // \u67e5\u8be2\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5b50\u8282\u70b9 List<String> strings = curatorClient.getChildren().forPath(\"/\"); log.warn(String.valueOf(strings)); curatorClient.close(); } }","title":"\u5728CommandLineRunner\u4e2d\u6253\u5370imooc\u8fd9\u4e2aNode\u4e0b\u7684\u6240\u6709\u7ed3\u70b9"}]}