{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SpringBoot\u7f16\u7a0b\u624b\u518c \u5728\u5b98\u65b9\u6587\u6863\u57fa\u7840\u4e0a\u7ed3\u5408\u5b9e\u9645\u5f00\u53d1\u6574\u7406\u7684\u4e00\u4e9b\u5feb\u901f\u4e0a\u624b\u7684\u6280\u5de7","title":"Home"},{"location":"#springboot","text":"\u5728\u5b98\u65b9\u6587\u6863\u57fa\u7840\u4e0a\u7ed3\u5408\u5b9e\u9645\u5f00\u53d1\u6574\u7406\u7684\u4e00\u4e9b\u5feb\u901f\u4e0a\u624b\u7684\u6280\u5de7","title":"SpringBoot\u7f16\u7a0b\u624b\u518c"},{"location":"about/","text":"\u5173\u4e8e\u672c\u7ad9 \u672c\u624b\u518c\u4f1a\u6839\u636eSpringBoot\u7248\u672c\u8fed\u4ee3\u6765\u4e0d\u5b9a\u671f\u66f4\u65b0\uff0c\u6b22\u8fce\u5927\u5bb6\u4e92\u76f8\u4ea4\u6d41SpringBoot\u5f00\u53d1\u6280\u5de7","title":"About"},{"location":"about/#_1","text":"\u672c\u624b\u518c\u4f1a\u6839\u636eSpringBoot\u7248\u672c\u8fed\u4ee3\u6765\u4e0d\u5b9a\u671f\u66f4\u65b0\uff0c\u6b22\u8fce\u5927\u5bb6\u4e92\u76f8\u4ea4\u6d41SpringBoot\u5f00\u53d1\u6280\u5de7","title":"\u5173\u4e8e\u672c\u7ad9"},{"location":"aop/","text":"","title":"aop\u5207\u9762\u7f16\u7a0b"},{"location":"async/","text":"","title":"springAsync\u5f02\u6b65\u5f00\u53d1\u5de5\u5177"},{"location":"builder/","text":"","title":"\u5efa\u9020\u8005\u6a21\u5f0f"},{"location":"caffeine/","text":"","title":"caffeine\u5185\u5b58\u7f13\u5b58\u5de5\u5177"},{"location":"common-util/","text":"","title":"apache\u5de5\u5177\u7c7b"},{"location":"config-processor/","text":"","title":"springBoot\u9879\u76ee\u914d\u7f6e\u6587\u4ef6\u5904\u7406\u5668"},{"location":"event/","text":"","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"filter/","text":"","title":"webFilter\u8fc7\u6ee4\u5668\u5f00\u53d1"},{"location":"guava-util/","text":"","title":"guava\u5de5\u5177\u7c7b"},{"location":"gzip/","text":"","title":"gzip-api\u6570\u636e\u538b\u7f29\u914d\u7f6e"},{"location":"hutool-util/","text":"","title":"hutool\u5de5\u5177\u7c7b"},{"location":"init/","text":"","title":"initializingBean\u9884\u52a0\u8f7d\u5de5\u5177"},{"location":"inteceptor/","text":"","title":"inteceptor\u62e6\u622a\u5668\u5f00\u53d1"},{"location":"lifecycle/","text":"","title":"lifecycle\u751f\u547d\u5468\u671f\u81ea\u5b9a\u4e49\u5904\u7406\u5de5\u5177"},{"location":"listener/","text":"","title":"webListener\u76d1\u542c\u5668\u5f00\u53d1"},{"location":"logback/","text":"SpringBoot\u9ed8\u8ba4\u65e5\u5fd7\u6846\u67b6logback\u5e38\u7528\u914d\u7f6e logback-spring.xml\u65b9\u5f0f\u914d\u7f6e <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <!--\u4e3a\u4e86\u9632\u6b62\u8fdb\u7a0b\u9000\u51fa\u65f6\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4e22\u5931\uff0c\u8bf7\u52a0\u4e0a\u6b64\u9009\u9879--> <shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/> <!-- \u5f15\u5165 Spring Boot \u9ed8\u8ba4\u7684 logback XML \u914d\u7f6e\u6587\u4ef6 --> <include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/> <!-- \u63a7\u5236\u53f0 Appender --> <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\"> <!-- \u65e5\u5fd7\u7684\u683c\u5f0f\u5316 --> <encoder> <!-- CONSOLE_LOG_PATTERN \u662f Spring Boot \u9ed8\u8ba4\u7684 logback \u914d\u7f6e defaults.xml\u91cc\u5b9a\u4e49\u7684\u65e5\u5fd7\u683c\u5f0f --> <!-- <pattern>${CONSOLE_LOG_PATTERN}</pattern>--> <pattern> %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%thread]){faint} %clr(%-40.40logger{39}){cyan} : %line - %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} </pattern> <charset>utf8</charset> </encoder> </appender> <!-- \u4ece Spring Boot \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u8bfb\u53d6 spring.application.name \u5e94\u7528\u540d --> <springProperty name=\"applicationName\" scope=\"context\" source=\"spring.application.name\"/> <!-- \u65e5\u5fd7\u6587\u4ef6\u7684\u8def\u5f84 --> <property name=\"LOG_FILE\" value=\"logs/${applicationName}.log\"/> <!-- \u65e5\u5fd7\u6587\u4ef6 Appender --> <appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> <file>${LOG_FILE}</file> <!--\u6eda\u52a8\u7b56\u7565\uff0c\u57fa\u4e8e\u65f6\u95f4 + \u5927\u5c0f\u7684\u5206\u5305\u7b56\u7565 --> <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"> <fileNamePattern>%d{yyyy-MM-dd}.%i.${LOG_FILE}.gz</fileNamePattern> <!--\u65e5\u5fd7\u6587\u4ef6\u4fdd\u7559\u5929\u6570--> <maxHistory>2</maxHistory> <!-- \u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\u6700\u5927\u9650\u5b9a100MB --> <maxFileSize>50MB</maxFileSize> </rollingPolicy> <!-- \u65e5\u5fd7\u7684\u683c\u5f0f\u5316 --> <encoder> <!-- <pattern>${FILE_LOG_PATTERN}</pattern>--> <!-- FILE_LOG_PATTERN \u662f Spring Boot \u9ed8\u8ba4\u7684 logback \u914d\u7f6e defaults.xml\u91cc\u5b9a\u4e49\u7684\u65e5\u5fd7\u683c\u5f0f --> <!-- \u9ed8\u8ba4\u7684 pattern\u683c\u5f0f\u4e0d\u4f1a\u663e\u793a\u4ee3\u7801\u884c\u53f7,\u8fd9\u91cc\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684pattern --> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%thread] %-40.40logger{39} : %line - : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} </pattern> <charset>utf8</charset> </encoder> </appender> <!-- \u8bbe\u7f6e Appender ,\u65e5\u5fd7\u7684\u8f93\u51fa\u4f4d\u7f6e --> <root level=\"info\"> <!-- \u63a7\u5236\u53f0\u8f93\u51fa --> <appender-ref ref=\"console\"/> <!-- *.log\u6587\u4ef6\u8f93\u51fa --> <appender-ref ref=\"file\"/> </root> </configuration>","title":"logback\u65e5\u5fd7\u6253\u5370\u914d\u7f6e"},{"location":"logback/#springbootlogback","text":"logback-spring.xml\u65b9\u5f0f\u914d\u7f6e <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <!--\u4e3a\u4e86\u9632\u6b62\u8fdb\u7a0b\u9000\u51fa\u65f6\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4e22\u5931\uff0c\u8bf7\u52a0\u4e0a\u6b64\u9009\u9879--> <shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/> <!-- \u5f15\u5165 Spring Boot \u9ed8\u8ba4\u7684 logback XML \u914d\u7f6e\u6587\u4ef6 --> <include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/> <!-- \u63a7\u5236\u53f0 Appender --> <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\"> <!-- \u65e5\u5fd7\u7684\u683c\u5f0f\u5316 --> <encoder> <!-- CONSOLE_LOG_PATTERN \u662f Spring Boot \u9ed8\u8ba4\u7684 logback \u914d\u7f6e defaults.xml\u91cc\u5b9a\u4e49\u7684\u65e5\u5fd7\u683c\u5f0f --> <!-- <pattern>${CONSOLE_LOG_PATTERN}</pattern>--> <pattern> %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%thread]){faint} %clr(%-40.40logger{39}){cyan} : %line - %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} </pattern> <charset>utf8</charset> </encoder> </appender> <!-- \u4ece Spring Boot \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u8bfb\u53d6 spring.application.name \u5e94\u7528\u540d --> <springProperty name=\"applicationName\" scope=\"context\" source=\"spring.application.name\"/> <!-- \u65e5\u5fd7\u6587\u4ef6\u7684\u8def\u5f84 --> <property name=\"LOG_FILE\" value=\"logs/${applicationName}.log\"/> <!-- \u65e5\u5fd7\u6587\u4ef6 Appender --> <appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> <file>${LOG_FILE}</file> <!--\u6eda\u52a8\u7b56\u7565\uff0c\u57fa\u4e8e\u65f6\u95f4 + \u5927\u5c0f\u7684\u5206\u5305\u7b56\u7565 --> <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"> <fileNamePattern>%d{yyyy-MM-dd}.%i.${LOG_FILE}.gz</fileNamePattern> <!--\u65e5\u5fd7\u6587\u4ef6\u4fdd\u7559\u5929\u6570--> <maxHistory>2</maxHistory> <!-- \u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\u6700\u5927\u9650\u5b9a100MB --> <maxFileSize>50MB</maxFileSize> </rollingPolicy> <!-- \u65e5\u5fd7\u7684\u683c\u5f0f\u5316 --> <encoder> <!-- <pattern>${FILE_LOG_PATTERN}</pattern>--> <!-- FILE_LOG_PATTERN \u662f Spring Boot \u9ed8\u8ba4\u7684 logback \u914d\u7f6e defaults.xml\u91cc\u5b9a\u4e49\u7684\u65e5\u5fd7\u683c\u5f0f --> <!-- \u9ed8\u8ba4\u7684 pattern\u683c\u5f0f\u4e0d\u4f1a\u663e\u793a\u4ee3\u7801\u884c\u53f7,\u8fd9\u91cc\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684pattern --> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%thread] %-40.40logger{39} : %line - : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} </pattern> <charset>utf8</charset> </encoder> </appender> <!-- \u8bbe\u7f6e Appender ,\u65e5\u5fd7\u7684\u8f93\u51fa\u4f4d\u7f6e --> <root level=\"info\"> <!-- \u63a7\u5236\u53f0\u8f93\u51fa --> <appender-ref ref=\"console\"/> <!-- *.log\u6587\u4ef6\u8f93\u51fa --> <appender-ref ref=\"file\"/> </root> </configuration>","title":"SpringBoot\u9ed8\u8ba4\u65e5\u5fd7\u6846\u67b6logback\u5e38\u7528\u914d\u7f6e"},{"location":"mongo/","text":"","title":"mongodb\u6587\u6863\u6570\u636e\u5e93\u5de5\u5177"},{"location":"redis/","text":"","title":"redis\u5916\u90e8\u7f13\u5b58\u5de5\u5177"},{"location":"restful/","text":"restful\u5f00\u53d1\u5e38\u7528\u914d\u7f6e","title":"restful\u73b0\u4ee3web\u5f00\u53d1\u5e38\u7528\u914d\u7f6e"},{"location":"restful/#restful","text":"","title":"restful\u5f00\u53d1\u5e38\u7528\u914d\u7f6e"},{"location":"runner/","text":"","title":"runnner\u542f\u52a8\u65f6\u9644\u52a0\u7684\u8fd0\u884c\u5de5\u5177"},{"location":"security/","text":"","title":"springSecurity-web\u5b89\u5168\u5de5\u5177"},{"location":"spring-inner-util/","text":"","title":"spring\u81ea\u5e26\u7684\u4e00\u4e9b\u5de5\u5177\u7c7b"},{"location":"strategy/","text":"","title":"\u7b56\u7565\u6a21\u5f0f"},{"location":"task/","text":"","title":"springTask\u81ea\u5e26\u7684\u4efb\u52a1\u8c03\u5ea6\u5de5\u5177"},{"location":"thymeleaf/","text":"","title":"thymeleaf\u4f20\u7edfweb\u5f00\u53d1\u5de5\u5177"},{"location":"tutorial/","text":"jdk\u548cmaven\u73af\u5883 idea-java\u5f00\u53d1\u5de5\u5177","title":"IDE\u73af\u5883"},{"location":"tutorial/#jdkmaven","text":"","title":"jdk\u548cmaven\u73af\u5883"},{"location":"tutorial/#idea-java","text":"","title":"idea-java\u5f00\u53d1\u5de5\u5177"},{"location":"usage/","text":"\u5728\u7ebf\u6784\u5efaspringboot\u9879\u76ee \u5b98\u65b9\u63d0\u4f9b\u7684\u5728\u7ebf\u6784\u5efa\u7f51\u7ad9 spring initializr alibaba\u63d0\u4f9b\u7684\u5728\u7ebf\u6784\u5efa\u7f51\u7ad9 alibaba spring initializr","title":"\u6784\u5efaSpringBoot"},{"location":"usage/#springboot","text":"","title":"\u5728\u7ebf\u6784\u5efaspringboot\u9879\u76ee"},{"location":"usage/#_1","text":"spring initializr","title":"\u5b98\u65b9\u63d0\u4f9b\u7684\u5728\u7ebf\u6784\u5efa\u7f51\u7ad9"},{"location":"usage/#alibaba","text":"alibaba spring initializr","title":"alibaba\u63d0\u4f9b\u7684\u5728\u7ebf\u6784\u5efa\u7f51\u7ad9"},{"location":"validation/","text":"","title":"jsr303\u6821\u9a8c\u5f00\u53d1\u5de5\u5177"},{"location":"webflux/","text":"","title":"webflux\u54cd\u5e94\u5f0fAPI\u5f00\u53d1\u5de5\u5177"},{"location":"note/cycle-dep/","text":"","title":"\u5faa\u73af\u4f9d\u8d56\u95ee\u9898"},{"location":"note/mvc/","text":"","title":"springMVC\u6267\u884c\u6d41\u7a0b"},{"location":"note/sb-init/","text":"","title":"springboot\u542f\u52a8\u6d41\u7a0b"},{"location":"note/spi/","text":"","title":"SPI\u673a\u5236"},{"location":"note/thread/","text":"","title":"\u591a\u7ebf\u7a0b\u4e0e\u7ebf\u7a0b\u6c60\u95ee\u9898"},{"location":"third/apollo/","text":"\u643a\u7a0bApollo","title":"Apollo\u643a\u7a0b\u670d\u52a1\u914d\u7f6e\u4e2d\u5fc3"},{"location":"third/apollo/#apollo","text":"","title":"\u643a\u7a0bApollo"},{"location":"third/cxf/","text":"","title":"webService\u7f16\u7a0b"},{"location":"third/docker/","text":"","title":"\u6784\u5efadocker-springboot\u9879\u76ee\u955c\u50cf"},{"location":"third/druid/","text":"","title":"druid\u53ef\u89c6\u5316\u6570\u636e\u5e93\u8fde\u63a5\u6c60"},{"location":"third/es/","text":"","title":"elasticSearch\u65e5\u5fd7\u641c\u7d22\u5f00\u53d1"},{"location":"third/gateway/","text":"","title":"gateway\u5f00\u6e90api\u7f51\u5173"},{"location":"third/influxdb/","text":"","title":"influxDB\u65f6\u5e8f\u6570\u636e\u5e93"},{"location":"third/iptool/","text":"\u6839\u636eIP\u5b9a\u4f4d\u5730\u7406\u4f4d\u7f6e \u4f7f\u7528ip2region\u67e5\u8be2IP\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e 1.\u9996\u5148\u9879\u76ee\u5f15\u5165maven\u4f9d\u8d56 <dependency> <groupId>org.lionsoul</groupId> <artifactId>ip2region</artifactId> <version>1.7.2</version> </dependency> 2.\u4e0b\u8f7dIP\u5e93\u6587\u4ef6(ip2region.db) \u4e0b\u8f7d\u5730\u5740 3.\u628a ip2region.db \u590d\u5236\u5230 maven \u9879\u76ee\u7684 resources \u76ee\u5f55\u4e0b 4.\u4ee3\u7801\u4f7f\u7528ip2region import java.io.File; import java.lang.reflect.Method; import org.lionsoul.ip2region.DataBlock; import org.lionsoul.ip2region.DbConfig; import org.lionsoul.ip2region.DbSearcher; import org.lionsoul.ip2region.Util; /** * @author wy126 */ public class Ip2RegionUtil { public static String getCityInfo(String ip) { //db String dbPath = Ip2RegionUtil.class.getResource(\"/ip2region.db\").getPath(); File file = new File(dbPath); if (!file.exists()) { System.out.println(\"Error: Invalid ip2region.db file\"); } try { DbConfig config = new DbConfig(); DbSearcher searcher = new DbSearcher(config, dbPath); Method method = null; method = searcher.getClass().getMethod(\"btreeSearch\", String.class); DataBlock dataBlock = null; if (!Util.isIpAddress(ip)) { System.out.println(\"Error: Invalid ip address\"); } dataBlock = (DataBlock) method.invoke(searcher, ip); return dataBlock.getRegion(); } catch (Exception e) { e.printStackTrace(); } return null; } } \u8c03\u7528\u7b2c\u4e09\u65b9API\u83b7\u53d6IP\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e \u592a\u5e73\u6d0b\u7f51\u7edcIP\u5730\u5740\u67e5\u8be2 \u6dd8\u5b9dIP\u5730\u5740\u5e93","title":"IP\u5b9a\u4f4d\u5730\u7406\u4f4d\u7f6e"},{"location":"third/iptool/#ip","text":"","title":"\u6839\u636eIP\u5b9a\u4f4d\u5730\u7406\u4f4d\u7f6e"},{"location":"third/iptool/#ip2regionip","text":"1.\u9996\u5148\u9879\u76ee\u5f15\u5165maven\u4f9d\u8d56 <dependency> <groupId>org.lionsoul</groupId> <artifactId>ip2region</artifactId> <version>1.7.2</version> </dependency> 2.\u4e0b\u8f7dIP\u5e93\u6587\u4ef6(ip2region.db) \u4e0b\u8f7d\u5730\u5740 3.\u628a ip2region.db \u590d\u5236\u5230 maven \u9879\u76ee\u7684 resources \u76ee\u5f55\u4e0b 4.\u4ee3\u7801\u4f7f\u7528ip2region import java.io.File; import java.lang.reflect.Method; import org.lionsoul.ip2region.DataBlock; import org.lionsoul.ip2region.DbConfig; import org.lionsoul.ip2region.DbSearcher; import org.lionsoul.ip2region.Util; /** * @author wy126 */ public class Ip2RegionUtil { public static String getCityInfo(String ip) { //db String dbPath = Ip2RegionUtil.class.getResource(\"/ip2region.db\").getPath(); File file = new File(dbPath); if (!file.exists()) { System.out.println(\"Error: Invalid ip2region.db file\"); } try { DbConfig config = new DbConfig(); DbSearcher searcher = new DbSearcher(config, dbPath); Method method = null; method = searcher.getClass().getMethod(\"btreeSearch\", String.class); DataBlock dataBlock = null; if (!Util.isIpAddress(ip)) { System.out.println(\"Error: Invalid ip address\"); } dataBlock = (DataBlock) method.invoke(searcher, ip); return dataBlock.getRegion(); } catch (Exception e) { e.printStackTrace(); } return null; } }","title":"\u4f7f\u7528ip2region\u67e5\u8be2IP\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e"},{"location":"third/iptool/#apiip","text":"\u592a\u5e73\u6d0b\u7f51\u7edcIP\u5730\u5740\u67e5\u8be2 \u6dd8\u5b9dIP\u5730\u5740\u5e93","title":"\u8c03\u7528\u7b2c\u4e09\u65b9API\u83b7\u53d6IP\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e"},{"location":"third/jasypt/","text":"jasypt \u9700\u8981\u7684POM\u4f9d\u8d56 <dependency> <groupId>com.github.ulisesbocchio</groupId> <artifactId>jasypt-spring-boot-starter</artifactId> <version>2.0.0</version> </dependency> \u914d\u7f6ejasypt \u4e00\u3001\u5728application.properties\u91cc\u914d\u7f6ejasypt #jasypt\u7684\u52a0\u5bc6\u914d\u7f6e #\u5bc6\u94a5, # \u4e0d\u5efa\u8bae\u5c06jasypt.encryptor.password\u76f4\u63a5\u914d\u7f6e\u5728\u5c5e\u6027\u6587\u4ef6\u4e2d\uff0c # \u53ef\u4ee5\u901a\u8fc7java -jar -Djasypt.encryptor.password=atpingan \u542f\u52a8\u7a0b\u5e8f\uff0c\u4f5c\u4e3a\u7cfb\u7edf\u5c5e\u6027\u3001\u547d\u4ee4\u884c\u53c2\u6570\u6216\u73af\u5883\u53d8\u91cf\u4f20\u9012 jasypt.encryptor.password=atpingan #\u7b97\u6cd5 jasypt.encryptor.algorithm=PBEWithMD5AndDES #\u52a0\u5bc6\u5668\u914d\u7f6e jasypt.encryptor.iv-generator-classname=org.jasypt.iv.NoIvGenerator \u4e8c\u3001\u5728\u542f\u52a8\u7c7b\u4e0a\u6dfb\u52a0@EnableEncryptableProperties\u6ce8\u89e3 \u4e09\u3001\u5728\u6d4b\u8bd5\u7c7b\u91cc\u628a\u660e\u6587\u52a0\u5bc6\u4e3a\u5bc6\u6587 @Test void contextLoads() { BasicTextEncryptor textEncryptor = new BasicTextEncryptor(); textEncryptor.setPassword(\"atpingan\"); String userNameS = textEncryptor.encrypt(\"root\"); String passWordS = textEncryptor.encrypt(\"123456\"); System.out.println(\"userName--> \" + userNameS); System.out.println(\"passWord--> \" + passWordS); //\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 // \u7248\u6743\u58f0\u660e\uff1a\u672c\u6587\u4e3aCSDN\u535a\u4e3b\u300c\u795e\u96d5\u5927\u4fa0mu\u300d\u7684\u539f\u521b\u6587\u7ae0\uff0c\u9075\u5faaCC 4.0 BY-SA\u7248\u6743\u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u53ca\u672c\u58f0\u660e\u3002 // \u539f\u6587\u94fe\u63a5\uff1ahttps://blog.csdn.net/m0_37635053/article/details/118256179 System.err.println(textEncryptor.decrypt(userNameS)); System.err.println(textEncryptor.decrypt(passWordS)); } \u56db\u3001\u5728properties\u91cc\u914d\u7f6e\u81ea\u5b9a\u4e49\u7684\u52a0\u5bc6\u914d\u7f6e\u9879 # \u5176\u4e2dENC()\u662f\u9ed8\u8ba4\u52a0\u5bc6\u6cd5\u7684\u56fa\u5b9a\u914d\u7f6e,ENC()\u5185\u90e8\u7684\u5b57\u7b26\u4e32\u4e3a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587 test.app.param=ENC(8wGAMAxhagkUtGmTbfqq/A==) \u4e94\u3001\u6d4b\u8bd5\u8bfb\u53d6\u81ea\u5b9a\u4e49\u7684\u52a0\u5bc6\u914d\u7f6e\u9879 @RestController public class TestController { @Value(\"${test.app.param:hello}\") private String testAppParam; @GetMapping(\"/testJasypt\") public String testJasypt() { return testAppParam + \"!!!\"; } }","title":"Jasypt\u914d\u7f6e\u6587\u4ef6\u52a0\u5bc6\u5de5\u5177"},{"location":"third/jasypt/#jasypt","text":"","title":"jasypt"},{"location":"third/jasypt/#pom","text":"<dependency> <groupId>com.github.ulisesbocchio</groupId> <artifactId>jasypt-spring-boot-starter</artifactId> <version>2.0.0</version> </dependency>","title":"\u9700\u8981\u7684POM\u4f9d\u8d56"},{"location":"third/jasypt/#jasypt_1","text":"\u4e00\u3001\u5728application.properties\u91cc\u914d\u7f6ejasypt #jasypt\u7684\u52a0\u5bc6\u914d\u7f6e #\u5bc6\u94a5, # \u4e0d\u5efa\u8bae\u5c06jasypt.encryptor.password\u76f4\u63a5\u914d\u7f6e\u5728\u5c5e\u6027\u6587\u4ef6\u4e2d\uff0c # \u53ef\u4ee5\u901a\u8fc7java -jar -Djasypt.encryptor.password=atpingan \u542f\u52a8\u7a0b\u5e8f\uff0c\u4f5c\u4e3a\u7cfb\u7edf\u5c5e\u6027\u3001\u547d\u4ee4\u884c\u53c2\u6570\u6216\u73af\u5883\u53d8\u91cf\u4f20\u9012 jasypt.encryptor.password=atpingan #\u7b97\u6cd5 jasypt.encryptor.algorithm=PBEWithMD5AndDES #\u52a0\u5bc6\u5668\u914d\u7f6e jasypt.encryptor.iv-generator-classname=org.jasypt.iv.NoIvGenerator \u4e8c\u3001\u5728\u542f\u52a8\u7c7b\u4e0a\u6dfb\u52a0@EnableEncryptableProperties\u6ce8\u89e3 \u4e09\u3001\u5728\u6d4b\u8bd5\u7c7b\u91cc\u628a\u660e\u6587\u52a0\u5bc6\u4e3a\u5bc6\u6587 @Test void contextLoads() { BasicTextEncryptor textEncryptor = new BasicTextEncryptor(); textEncryptor.setPassword(\"atpingan\"); String userNameS = textEncryptor.encrypt(\"root\"); String passWordS = textEncryptor.encrypt(\"123456\"); System.out.println(\"userName--> \" + userNameS); System.out.println(\"passWord--> \" + passWordS); //\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 // \u7248\u6743\u58f0\u660e\uff1a\u672c\u6587\u4e3aCSDN\u535a\u4e3b\u300c\u795e\u96d5\u5927\u4fa0mu\u300d\u7684\u539f\u521b\u6587\u7ae0\uff0c\u9075\u5faaCC 4.0 BY-SA\u7248\u6743\u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u53ca\u672c\u58f0\u660e\u3002 // \u539f\u6587\u94fe\u63a5\uff1ahttps://blog.csdn.net/m0_37635053/article/details/118256179 System.err.println(textEncryptor.decrypt(userNameS)); System.err.println(textEncryptor.decrypt(passWordS)); } \u56db\u3001\u5728properties\u91cc\u914d\u7f6e\u81ea\u5b9a\u4e49\u7684\u52a0\u5bc6\u914d\u7f6e\u9879 # \u5176\u4e2dENC()\u662f\u9ed8\u8ba4\u52a0\u5bc6\u6cd5\u7684\u56fa\u5b9a\u914d\u7f6e,ENC()\u5185\u90e8\u7684\u5b57\u7b26\u4e32\u4e3a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587 test.app.param=ENC(8wGAMAxhagkUtGmTbfqq/A==) \u4e94\u3001\u6d4b\u8bd5\u8bfb\u53d6\u81ea\u5b9a\u4e49\u7684\u52a0\u5bc6\u914d\u7f6e\u9879 @RestController public class TestController { @Value(\"${test.app.param:hello}\") private String testAppParam; @GetMapping(\"/testJasypt\") public String testJasypt() { return testAppParam + \"!!!\"; } }","title":"\u914d\u7f6ejasypt"},{"location":"third/jpa/","text":"","title":"springDataJpa\u7f16\u7a0b"},{"location":"third/jwt/","text":"","title":"jwt-SPA\u5f00\u53d1\u5fc5\u5907\u7b7e\u540d\u5de5\u5177"},{"location":"third/lombok/","text":"","title":"lombok\u63d2\u4ef6\u5999\u7528"},{"location":"third/mplus/","text":"","title":"mybatis-plus\u56fd\u4ea7ORM\u5de5\u5177"},{"location":"third/mqtt/","text":"","title":"mqtt\u7f16\u7a0b"},{"location":"third/mybatis/","text":"","title":"\u539f\u751fmybatis-ORM\u5de5\u5177"},{"location":"third/nacos/","text":"","title":"nacos\u963f\u91cc\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3"},{"location":"third/neo4j/","text":"","title":"neo4j\u56fe\u5f62\u6570\u636e\u5e93"},{"location":"third/netty/","text":"","title":"tcp-or-udp\u7f16\u7a0b"},{"location":"third/quartz/","text":"","title":"quartz\u6301\u4e45\u5316\u4efb\u52a1\u8c03\u5ea6\u5de5\u5177"},{"location":"third/rabbit/","text":"","title":"rabbitmq\u6d88\u606f\u961f\u5217"},{"location":"third/satoken/","text":"","title":"saToken\u56fd\u4ea7web\u5b89\u5168\u5de5\u5177"},{"location":"third/sba/","text":"","title":"actuator\u53caSBA\u9879\u76ee\u76d1\u63a7\u5de5\u5177"},{"location":"third/shiro/","text":"","title":"shiro-web\u5b89\u5168\u5de5\u5177"},{"location":"third/swager/","text":"","title":"swagger\u63a5\u53e3\u6587\u6863\u5de5\u5177"},{"location":"third/websocket/","text":"","title":"webSocket\u7f16\u7a0b"},{"location":"third/xxl-job/","text":"","title":"xxl-job\u7f8e\u56e2\u4efb\u52a1\u8c03\u5ea6\u4e2d\u5fc3"},{"location":"third/zktool/","text":"zookeeper \u4ecb\u7ecd Zookeeper \u53eb\u505a\u5206\u5e03\u5f0f\u534f\u8c03\u670d\u52a1 Zookeeper \u662f\u4e00\u4e2a C/S \u67b6\u6784\u7684\u670d\u52a1\uff0c\u4e5f\u5c31\u662f Client \u2014 Server \u7684\u5f62\u5f0f\u3002 \u5728\u6211\u4eec\u4f7f\u7528 Zookeeper \u65f6\uff0c\u90fd\u662f\u4f7f\u7528 Zookeeper \u7684\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u7aef\u53d1\u9001\u8bf7\u6c42\uff0c\u7136\u540e\u7531\u670d\u52a1\u7aef\u505a\u51fa\u54cd\u5e94\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u3002 Zookeeper \u6570\u636e\u6a21\u578b\u7684\u7ed3\u6784\u4e3a\u6811\u5f62\u8282\u70b9\u3002Znode \u7684\u5143\u7d20\u7ec4\u6210\u6709 4 \u79cd\uff1adata\uff08\u7528\u6237\u6570\u636e\uff09\u3001ACL\uff08\u6743\u9650\u4fe1\u606f\uff09\u3001child\uff08\u5b50\u8282\u70b9\u5f15\u7528\uff09\u3001stat\uff08\u5143\u6570\u636e\uff09\u3002Znode \u7684\u7c7b\u578b\u6709 4 \u79cd\uff1a\u6301\u4e45\u8282\u70b9\u3001\u6301\u4e45\u987a\u5e8f\u8282\u70b9\u3001\u4e34\u65f6\u8282\u70b9\u3001\u4e34\u65f6\u987a\u5e8f\u8282\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u6839\u636e Znode \u7684\u7279\u70b9\u6765\u5b9e\u73b0\u5404\u79cd\u529f\u80fd\uff0c\u6bd4\u5982\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u3001\u914d\u7f6e\u4e2d\u5fc3\u3001\u5206\u5e03\u5f0f\u9501\u7b49. Zookeeper \u662f CP \u7cfb\u7edf\uff0c\u5728\u4fdd\u8bc1\u6570\u636e\u4e00\u81f4\u6027\u7684\u540c\u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u670d\u52a1\u6ce8\u518c\u7684\u9ad8\u53ef\u7528\u3002 zookeeper\u7279\u70b9 \u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\uff0cZookeeper \u7684\u90e8\u7f72\u65b9\u5f0f\u4e3a\u4e00\u4e3b\uff08 Leader \uff09\u591a\u4ece\uff08 Follower \uff09\u7684\u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ea\u8981\u534a\u6570\u4ee5\u4e0a\u7684\u8282\u70b9\uff08\u5305\u62ec Leader \u8282\u70b9\uff09\u5b58\u6d3b\uff0cZookeeper \u96c6\u7fa4\u5c31\u80fd\u6b63\u5e38\u670d\u52a1\u3002\u5c31\u7b97\u662f Leader \u8282\u70b9\u6302\u6389\u4e86\uff0cZookeeper \u4e5f\u4f1a\u8fdb\u884c\u5d29\u6e83\u6062\u590d\uff0c\u6240\u8bf4 Zookeeper \u96c6\u7fa4\u672c\u8eab\u662f\u9ad8\u53ef\u7528\u7684\uff1b Zookeeper \u96c6\u7fa4\u7684\u6570\u636e\u5177\u6709\u5168\u5c40\u4e00\u81f4\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65e0\u8bba\u5ba2\u6237\u7aef\u8fde\u63a5\u5230 Zookeeper \u96c6\u7fa4\u7684\u54ea\u4e00\u4e2a\u4ece\u8282\u70b9\uff0c\u83b7\u53d6\u7684\u6570\u636e\u90fd\u662f\u4e00\u81f4\u7684\uff1b \u5728 Zookeeper \u96c6\u7fa4\u8282\u70b9\u8fdb\u884c\u6570\u636e\u540c\u6b65\u66f4\u65b0\u65f6\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\u6240\u4ee5 Zookeeper \u7684\u6570\u636e\u66f4\u65b0\u5177\u6709\u539f\u5b50\u6027\uff1b \u5728\u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\u5bf9 Zookeeper \u8282\u70b9\u8fdb\u884c\u66f4\u65b0\u8bf7\u6c42\u64cd\u4f5c\u65f6\uff0c\u4f1a\u6839\u636e\u53d1\u9001\u7684\u987a\u5e8f\u4f9d\u6b21\u53bb\u6267\u884c\uff1b \u7531\u4e8e Zookeeper \u80fd\u5b58\u50a8\u7684\u6570\u636e\u91cf\u975e\u5e38\u5c0f\uff0c\u6240\u4ee5\u6570\u636e\u7684\u540c\u6b65\u66f4\u65b0\u4e5f\u4f1a\u975e\u5e38\u5feb\u3002\u4e5f\u5c31\u53ef\u4ee5\u8bf4\u5728\u4e00\u5b9a\u65f6\u95f4\u6bb5\u5185\uff0c\u5ba2\u6237\u7aef\u83b7\u53d6\u7684\u6570\u636e\u662f\u5b9e\u65f6\u7684 zookeeper\u4f7f\u7528\u573a\u666f \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0 \u5f53\u6211\u4eec\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u589e\u52a0\u4e86\u4e00\u4e2a\u670d\u52a1\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5229\u7528 Znode \u548c Watcher\uff0c\u8ba9\u5b83\u6ce8\u518c\u5230 Zookeeper \u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5bf9\u8fd9\u4e2a\u670d\u52a1\u8fdb\u884c\u7ba1\u7406\uff1b \u5206\u5e03\u5f0f\u9501 \u4e3a\u4e86\u9632\u6b62\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\uff0c\u670d\u52a1\u4e2d\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u4e92\u76f8\u5e72\u6270\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 Zookeeper \u7684\u4e34\u65f6\u987a\u5e8f\u8282\u70b9\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\uff0c\u5bf9\u8fd9\u4e9b\u8fdb\u7a0b\u8fdb\u884c\u8c03\u5ea6\uff0c\u8ba9\u5b83\u4eec\u987a\u5e8f\u6267\u884c\uff1b \u914d\u7f6e\u7ba1\u7406 \u6211\u4eec\u53ef\u4ee5\u628a\u6838\u5fc3\u7684\u914d\u7f6e\u6587\u4ef6\u4ea4\u7ed9 Zookeeper \u7ba1\u7406\u3002\u5f53\u6211\u4eec\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u65f6\uff0cZookeeper \u5c31\u4f1a\u628a\u914d\u7f6e\u6587\u4ef6\u7684\u4fe1\u606f\u540c\u6b65\u5230\u96c6\u7fa4\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e2d\u53bb \u642d\u5efazookeeper\u670d\u52a1\u5668 \u5efa\u8bae\u4f7f\u7528Docker\u5b89\u88c5 # \u62c9\u53d6 zookeeper \u955c\u50cf docker pull zookeeper # run \u542f\u52a8\uff0c-d \u540e\u53f0\u8fd0\u884c\uff0c--name \u522b\u540d\uff0c-p \u7aef\u53e3\u6620\u5c04\uff08\u53ef\u4ee5\u5199\u591a\u4e2a\uff09\uff0c \u5bb9\u5668\u540d\u79f0:\u7248\u672c\uff08\u4e0d\u5199\u9ed8\u8ba4latest\uff09 docker run -d --name=zookeeper -p 2181:2181 zookeeper zk\u53ef\u89c6\u5316\u7ba1\u7406\u5de5\u5177 \u5efa\u8bae\u4f7f\u7528PrettyZoo\uff0c \u4e0b\u8f7d\u5730\u5740 Curator Curator \u662f Netflix \u516c\u53f8\u5f00\u6e90\u7684\u4e00\u5957 Zookeeper \u5ba2\u6237\u7aef\u6846\u67b6, Curator \u63d0\u4f9b\u4e86\u4e00\u5957\u6613\u7528\u6027\u548c\u53ef\u8bfb\u6027\u66f4\u5f3a\u7684 Fluent \u98ce\u683c\u7684\u5ba2\u6237\u7aef API \uff0c \u8fd8\u63d0\u4f9b\u4e86 Zookeeper \u5404\u79cd\u5e94\u7528\u573a\u666f\u7684\u62bd\u8c61\u5c01\u88c5\uff0c \u6bd4\u5982\uff1a\u5206\u5e03\u5f0f\u9501\u670d\u52a1\u3001\u96c6\u7fa4\u9886\u5bfc\u9009\u4e3e\u3001\u5171\u4eab\u8ba1\u6570\u5668\u3001\u7f13\u5b58\u673a\u5236\u3001\u5206\u5e03\u5f0f\u961f\u5217\u7b49 POM\u914d\u7f6e <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-framework</artifactId> <version>5.1.0</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-recipes</artifactId> <version>5.1.0</version> </dependency> properties\u914d\u7f6e # Zookeeper \u5730\u5740 #curator.connectString=192.168.0.77:2181,192.168.0.88:2181,192.168.0.88:2181 curator.connectString=127.0.0.1:2181 # \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4 curator.sessionTimeoutMs=5000 # \u547d\u540d\u7a7a\u95f4\uff0c\u5f53\u524d\u5ba2\u6237\u7aef\u7684\u7236\u8282\u70b9,\u82e5zkServer\u6ca1\u6709imooc\u8fd9\u4e2aNode\uff0c\u5219\u672c\u9879\u76ee\u542f\u52a8\u65f6\u4f1a\u521b\u5efa\u8fd9\u4e2aNode,\u8fd9\u4e2aNode\u5c31\u662fnamespace curator.namespace=imooc # Tips\uff1a \u4f7f\u7528 curator \u65f6\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u662f\u5426\u914d\u7f6e namespace \uff0c # \u5982\u679c\u6ca1\u6709\u914d\u7f6e namespace \u7684\u8bdd\uff0c\u6211\u4eec\u4f7f\u7528 curator \u8fdb\u884c\u64cd\u4f5c\u65f6\uff0cpath \u53c2\u6570\u9700\u8981\u586b\u5199\u5168\u8def\u5f84\u3002 # \u5982\u679c\u914d\u7f6e\u4e86 namespace \uff0c\u6211\u4eec\u4f7f\u7528 curator \u65f6\uff0cCurator \u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5728 path \u524d\u52a0\u4e0a namespace \u8ba9ZkClient\u968f\u7740SpringBoot\u542f\u52a8\u800c\u542f\u52a8\u7684\u7528\u6cd5 package com.example.test22; import java.nio.charset.StandardCharsets; import java.util.List; import org.apache.curator.RetryPolicy; import org.apache.curator.framework.CuratorFramework; import org.apache.curator.framework.CuratorFrameworkFactory; import org.apache.curator.framework.imps.CuratorFrameworkState; import org.apache.curator.framework.recipes.cache.CuratorCache; import org.apache.curator.framework.recipes.cache.CuratorCacheListener; import org.apache.curator.retry.*; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.CommandLineRunner; import org.springframework.stereotype.Component; import lombok.extern.slf4j.Slf4j; @Slf4j @Component public class MyCuratorUtil implements CommandLineRunner { // Zookeeper \u670d\u52a1\u5668\u5730\u5740 @Value(\"${curator.connectString}\") private String connectString; // session \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4 @Value(\"${curator.sessionTimeoutMs}\") private int sessionTimeoutMs; // \u540d\u79f0\u7a7a\u95f4\uff1a\u5728\u64cd\u4f5c\u8282\u70b9\u65f6\uff0c\u4f1a\u4ee5 namespace \u4e3a\u7236\u8282\u70b9 @Value(\"${curator.namespace}\") private String namespace; /** * session \u91cd\u8fde\u7b56\u7565\uff0c\u4f7f\u7528\u5176\u4e2d\u4e00\u79cd\u5373\u53ef */ // RetryForever\uff1a\u95f4\u9694{\u53c2\u65701}\u6beb\u79d2\u540e\u91cd\u8fde\uff0c\u6c38\u8fdc\u91cd\u8bd5 private RetryPolicy retryForever = new RetryForever(3000); // RetryOneTime\uff1a{\u53c2\u65701}\u6beb\u79d2\u540e\u91cd\u8fde\uff0c\u53ea\u91cd\u8fde\u4e00\u6b21 private RetryPolicy retryOneTime = new RetryOneTime(3000); // RetryNTimes\uff1a {\u53c2\u65702}\u6beb\u79d2\u540e\u91cd\u8fde\uff0c\u91cd\u8fde{\u53c2\u65701}\u6b21 private RetryPolicy retryNTimes = new RetryNTimes(3, 3000); // RetryUntilElapsed\uff1a\u6bcf{\u53c2\u65702}\u6beb\u79d2\u91cd\u8fde\u4e00\u6b21\uff0c\u603b\u7b49\u5f85\u65f6\u95f4\u8d85\u8fc7{\u53c2\u65701}\u6beb\u79d2\u540e\u505c\u6b62\u91cd\u8fde private RetryPolicy retryUntilElapsed = new RetryUntilElapsed(10000, 3000); // ExponentialBackoffRetry\uff1a\u53ef\u91cd\u8fde{\u53c2\u65702}\u6b21\uff0c\u5e76\u589e\u52a0\u6bcf\u6b21\u91cd\u8fde\u4e4b\u95f4\u7684\u7761\u7720\u65f6\u95f4\uff0c\u589e\u52a0\u516c\u5f0f\u5982\u4e0b\uff1a // {\u53c2\u65701} * Math.max(1,random.nextInt(1 << ({\u53c2\u65702\uff1amaxRetries} + 1))) private RetryPolicy exponential = new ExponentialBackoffRetry(1000, 3); private CuratorFramework client = null; private CuratorCache cache3 = null; private void initZk() { // \u4f7f\u7528 CuratorFrameworkFactory \u6765\u6784\u5efa CuratorFramework client = CuratorFrameworkFactory.builder() // Zookeeper \u670d\u52a1\u5668\u5730\u5740\u5b57\u7b26\u4e32 .connectString(connectString) // session \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4 .sessionTimeoutMs(sessionTimeoutMs) // \u4f7f\u7528\u54ea\u79cd\u91cd\u8fde\u7b56\u7565 .retryPolicy(retryOneTime) // \u914d\u7f6e\u7236\u8282\u70b9 .namespace(namespace).build(); // \u5f00\u542f\u4f1a\u8bdd client.start(); log.warn(\"zk Client\u5df2\u542f\u52a8!\"); // \u6784\u5efa CuratorCache \u5b9e\u4f8b cache3 = CuratorCache.build(client, \"/\"); // \u4f7f\u7528 Fluent \u98ce\u683c\u548c lambda \u8868\u8fbe\u5f0f\u6765\u6784\u5efa CuratorCacheListener \u7684\u4e8b\u4ef6\u76d1\u542c CuratorCacheListener listener = CuratorCacheListener.builder() // \u5f00\u542f\u5bf9\u6240\u6709\u4e8b\u4ef6\u7684\u76d1\u542c // type \u4e8b\u4ef6\u7c7b\u578b\uff1aNODE_CREATED, NODE_CHANGED, NODE_DELETED; // oldNode \u539f\u8282\u70b9\uff1aChildData \u7c7b\uff0c\u5305\u62ec\u8282\u70b9\u8def\u5f84\uff0c\u8282\u70b9\u72b6\u6001 Stat\uff0c\u8282\u70b9 data // newNode \u65b0\u8282\u70b9\uff1a\u540c\u4e0a .forAll((type, oldNode, newNode) -> { log.warn(\" \u4e8b\u4ef6\u7c7b\u578b\uff1a{}\", type); log.warn(\" \u539f\u8282\u70b9\uff1a{}\", oldNode); log.warn(\" \u65b0\u8282\u70b9\uff1a{}\", newNode); }) // // \u5f00\u542f\u5bf9\u8282\u70b9\u521b\u5efa\u4e8b\u4ef6\u7684\u76d1\u542c // .forCreates(childData -> { // // log.warn(\"\u521b\u5efa\u4e86\u65b0\u8282\u70b9\uff1a{}\", childData); // // }) // // \u5f00\u542f\u5bf9\u8282\u70b9\u66f4\u65b0\u4e8b\u4ef6\u7684\u76d1\u542c // .forChanges((oldNode, newNode) -> { // log.warn(\"forChanges \u8282\u70b9\u539f\u59cb\u5185\u5bb9\uff1a{}\", oldNode); // log.warn(\"forChanges \u8282\u70b9\u66f4\u65b0\u540e\uff1a{}\", newNode); // }) // // \u5f00\u542f\u5bf9\u8282\u70b9\u5220\u9664\u4e8b\u4ef6\u7684\u76d1\u542c // .forDeletes(oldNode -> { // log.warn(\"\u5220\u9664\u4e86\u7ed3\u70b9:{}\", oldNode); // }) // \u521d\u59cb\u5316 .forInitialized(() -> { log.warn(\"CuratorCacheListener\u521d\u59cb\u5316\u5b8c\u6bd5\"); }) // \u6784\u5efa .build(); // \u6ce8\u518c CuratorCacheListener \u5230 CuratorCache cache3.listenable().addListener(listener); // CuratorCache \u5f00\u542f\u7f13\u5b58 cache3.start(); log.warn(\"zk CuratorCache\u5df2\u542f\u52a8!\"); log.warn(\"zk state:{}\", client.getState()); } @Override public void run(String... args) throws Exception { initZk(); } /** * \u7236\u8282\u70b9\u81ea\u52a8\u6389\u4e86\uff0c\u8981\u5728\u4e0b\u6b21\u64cd\u4f5c\u65f6\u6062\u590d\uff0c\u5373\u91cd\u65b0\u5efa\u7acb\u5e26zWatch \u7684 zkClient */ private void refreshZkClient() { if (client.getState() != CuratorFrameworkState.STOPPED) { cache3.close(); log.warn(\"zk CuratorCache \u5df2\u5173\u95ed!\"); client.close(); log.warn(\"zk Client \u5df2\u5173\u95ed!\"); } initZk(); log.warn(\"refreshZkClient---Completed\"); } public List<String> getAllNodeByPath(String path) throws Exception { refreshZkClient(); return client.getChildren().forPath(path); } public void createNormalNode(String path) throws Exception { refreshZkClient(); client.create().forPath(path); } public void createNodeAndData(String path, String dataStr) throws Exception { refreshZkClient(); client.create().forPath(path, dataStr.getBytes(StandardCharsets.UTF_8)); } public void updateNodeData(String path, String dataStr) throws Exception { refreshZkClient(); client.setData().forPath(path, dataStr.getBytes(StandardCharsets.UTF_8)); } public void deleteNode(String path) throws Exception { refreshZkClient(); client.delete().forPath(path); } } \u6d4b\u8bd5zk\u7684\u4f7f\u7528 @Autowired private MyCuratorUtil myCuratorUtil; @GetMapping(\"/testCreate\") public String testApi() throws Exception { myCuratorUtil.createNormalNode(\"/mooc\"); return testcfg; } @GetMapping(\"/findNodeList\") public String findNodeList() throws Exception { // \u67e5\u8be2\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5b50\u8282\u70b9 List<String> strings = myCuratorUtil.getAllNodeByPath(\"/t1\"); return String.valueOf(strings); } @PostMapping(\"/testCreate2\") public String testCreate2() throws Exception { myCuratorUtil.createNodeAndData(\"/mc3\", \"hello123\"); return testcfg; } @PutMapping(\"/testUpdate\") public String testUpdate() throws Exception { myCuratorUtil.updateNodeData(\"/mooc\", \"Wiki\"); return testcfg; } @DeleteMapping(\"/testDel\") public String testDel() throws Exception { //\u7236\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u5b50\u8282\u70b9-delete\u540e\uff0czk\u4f1a\u81ea\u52a8\u628a\u7236\u8282\u70b9\u4e5f\u5220\u6389 myCuratorUtil.deleteNode(\"/mooc\"); return testcfg; } zk\u5728\u7b2c\u4e09\u65b9\u6846\u67b6\u4e2d\u7684\u5e94\u7528 \u9664\u4e86\u5355\u72ec\u4f7f\u7528 Zookeeper \u6765\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u3001\u914d\u7f6e\u4e2d\u5fc3\u7b49\u529f\u80fd\u5916\uff0c \u5728\u6211\u4eec\u4f7f\u7528\u4e00\u4e9b\u4f18\u79c0\u7684\u6846\u67b6\u65f6\uff0c\u6bd4\u5982\u9ad8\u6027\u80fd\u7684\u5206\u5e03\u5f0f\u6d41\u5904\u7406\u5e73\u53f0 Apache Kafka\uff0c\u9ad8\u6027\u80fd\u7684 Java RPC \u6846\u67b6 Apache Dubbo\uff0c\u5b83\u4eec\u4e5f\u4e0d\u540c\u7a0b\u5ea6\u7684\u4f9d\u8d56\u4e86 Zookeeper \u670d\u52a1\u3002 zk\u5728kafka\u4e2d\u7684\u5e94\u7528 Topic \u914d\u7f6e\u7ba1\u7406\uff1a Topic \u7684\u914d\u7f6e\u4f1a\u6ce8\u518c\u5230 Zookeeper \u4e2d \u7684 config \u8282\u70b9\u4e0b\uff0c\u6839\u636e config \u8282\u70b9\u6765\u52a8\u6001\u66f4\u65b0\u914d\u7f6e\uff1b Broker \u7ba1\u7406\uff1a \u5728\u6bcf\u4e2a Broker \u542f\u52a8\u65f6\uff0c\u90fd\u4f1a\u6ce8\u518c\u5230 Zookeeper \u7684 brokers \u8282\u70b9\u4e0b\uff1b Topic \u53ca Partition \u7ba1\u7406\uff1a Topic \u4f1a\u6ce8\u518c\u5230 brokers \u8282\u70b9\u4e0b\u7684 topics \u8282\u70b9\u4e0b\uff0cPartition \u4f1a\u6ce8\u518c\u5230 Topic \u7684\u8282\u70b9\u4e0b\uff1b Producer \u8d1f\u8f7d\u5747\u8861\uff1a Producer \u5c06\u6d88\u606f\u53d1\u5e03\u5230 Topic \u65f6\uff0c\u4f1a\u6839\u636e Zookeeper \u7684 brokers \u8282\u70b9\u4e0b\u7684 Broker \u6765\u8fdb\u884c\u52a8\u6001\u7684\u8d1f\u8f7d\u5747\u8861\uff1b Consumer \u8d1f\u8f7d\u5747\u8861\uff1a Consumer \u4ece Topic \u62c9\u53d6\u6d88\u606f\u65f6\uff0c\u540c\u6837\u4e5f\u9700\u8981\u6839\u636e Zookeeper \u7684 brokers \u8282\u70b9\u4e0b\u7684 Broker \u6765\u8fdb\u884c\u52a8\u6001\u7684\u8d1f\u8f7d\u5747\u8861\uff1b \u6d88\u8d39\u7ba1\u7406\uff1a \u6bcf\u4e2a Partition \u53ea\u80fd\u88ab Consumer Group \u4e2d\u7684\u4e00\u4e2a Consumer \u8fdb\u884c\u6d88\u8d39\uff0c\u56e0\u6b64\u9700\u8981\u5173\u8054 Partition \u4e0e Consumer \u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5c06 Consumer \u7684 Consumer ID \u6ce8\u518c\u5230\u76f8\u5173\u8054\u7684 Partition \u8282\u70b9\u7684\u4e34\u65f6\u8282\u70b9\u4e0a\uff1b Offset \u8bb0\u5f55\uff1a \u5728 Consumer \u5bf9\u6307\u5b9a Partition \u8fdb\u884c\u6d88\u606f\u6d88\u8d39\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06 Partition \u7684\u6d88\u8d39\u6570\u91cf\u8bb0\u5f55\u5230 Zookeeper \u4e2d\u3002 zk\u5728Dubbo\u4e2d\u7684\u5e94\u7528 \u6839\u636e Zookeeper \u7684\u6811\u72b6\u7ed3\u6784\uff0cDubbo \u628a\u8282\u70b9\u5206\u4e3a 4 \u5c42 \u7b2c\u4e00\u5c42\u4e3a Root \u8282\u70b9\uff0c\u56fa\u5b9a\u4e3a dubbo\uff1b \u7b2c\u4e8c\u5c42\u4e3a\u670d\u52a1\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u670d\u52a1\u6765\u6ce8\u518c\u4e0d\u540c\u7684\u670d\u52a1\u8282\u70b9\uff0c\u540c\u65f6 Monitor \u4f1a\u76d1\u542c\u670d\u52a1\u8282\u70b9\uff1b \u7b2c\u4e09\u5c42\u4e3a\u670d\u52a1\u7684\u7c7b\u578b\uff0c\u5206\u522b\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u670d\u52a1\u6d88\u8d39\u8005\uff0c\u56fa\u5b9a\u4e3a providers \u548c consumers \uff1b \u7b2c\u56db\u5c42\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u670d\u52a1\u6d88\u8d39\u8005\u7684 URL\uff0c\u5982\u679c\u662f Provider \u5c31\u4f1a\u6ce8\u518c\u5230 providers \u8282\u70b9\u4e0b\u7684\u4e34\u65f6\u8282\u70b9\u3002\u5982\u679c\u662f Consumer \u5c31\u6ce8\u518c\u5230 consumers \u8282\u70b9\u4e0b\u7684\u4e34\u65f6\u8282\u70b9\uff0c\u5e76\u4e14\u5bf9\u540c\u4e00\u670d\u52a1\u4e0b\u7684 providers \u5f00\u542f\u76d1\u542c Zookeeper \u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u7684\u539f\u7406 \u670d\u52a1\u63d0\u4f9b\u8005\u628a URL \u6ce8\u518c\u5230 providers \u4e0b\u7684\u4e34\u65f6\u8282\u70b9\uff0c \u670d\u52a1\u6d88\u8d39\u8005\u4ece providers \u83b7\u53d6 URL \u5217\u8868\uff0c\u5e76\u5bf9 providers \u5f00\u542f\u5b50\u8282\u70b9\u4e8b\u4ef6\u7684\u76d1\u542c\u3002 \u6839\u636e Zookeeper \u4e34\u65f6\u8282\u70b9\u7684\u7279\u6027\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u53ea\u8981\u4e0e Zookeeper \u65ad\u5f00\u8fde\u63a5\uff0cZookeeper \u670d\u52a1\u5c31\u4f1a\u628a\u8be5\u4e34\u65f6\u8282\u70b9\u79fb\u9664\uff0c\u6b64\u65f6\u670d\u52a1\u6d88\u8d39\u8005\u5c31\u4f1a\u6536\u5230 providers \u7684\u5b50\u8282\u70b9\u79fb\u9664\u4e8b\u4ef6\uff0c\u7136\u540e\u66f4\u65b0\u81ea\u5df1\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u7684 URL \u5217\u8868","title":"ZooKeeper\u64cd\u4f5c\u5de5\u5177"},{"location":"third/zktool/#zookeeper","text":"","title":"zookeeper"},{"location":"third/zktool/#_1","text":"Zookeeper \u53eb\u505a\u5206\u5e03\u5f0f\u534f\u8c03\u670d\u52a1 Zookeeper \u662f\u4e00\u4e2a C/S \u67b6\u6784\u7684\u670d\u52a1\uff0c\u4e5f\u5c31\u662f Client \u2014 Server \u7684\u5f62\u5f0f\u3002 \u5728\u6211\u4eec\u4f7f\u7528 Zookeeper \u65f6\uff0c\u90fd\u662f\u4f7f\u7528 Zookeeper \u7684\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u7aef\u53d1\u9001\u8bf7\u6c42\uff0c\u7136\u540e\u7531\u670d\u52a1\u7aef\u505a\u51fa\u54cd\u5e94\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u3002 Zookeeper \u6570\u636e\u6a21\u578b\u7684\u7ed3\u6784\u4e3a\u6811\u5f62\u8282\u70b9\u3002Znode \u7684\u5143\u7d20\u7ec4\u6210\u6709 4 \u79cd\uff1adata\uff08\u7528\u6237\u6570\u636e\uff09\u3001ACL\uff08\u6743\u9650\u4fe1\u606f\uff09\u3001child\uff08\u5b50\u8282\u70b9\u5f15\u7528\uff09\u3001stat\uff08\u5143\u6570\u636e\uff09\u3002Znode \u7684\u7c7b\u578b\u6709 4 \u79cd\uff1a\u6301\u4e45\u8282\u70b9\u3001\u6301\u4e45\u987a\u5e8f\u8282\u70b9\u3001\u4e34\u65f6\u8282\u70b9\u3001\u4e34\u65f6\u987a\u5e8f\u8282\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u6839\u636e Znode \u7684\u7279\u70b9\u6765\u5b9e\u73b0\u5404\u79cd\u529f\u80fd\uff0c\u6bd4\u5982\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u3001\u914d\u7f6e\u4e2d\u5fc3\u3001\u5206\u5e03\u5f0f\u9501\u7b49. Zookeeper \u662f CP \u7cfb\u7edf\uff0c\u5728\u4fdd\u8bc1\u6570\u636e\u4e00\u81f4\u6027\u7684\u540c\u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u670d\u52a1\u6ce8\u518c\u7684\u9ad8\u53ef\u7528\u3002 zookeeper\u7279\u70b9 \u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\uff0cZookeeper \u7684\u90e8\u7f72\u65b9\u5f0f\u4e3a\u4e00\u4e3b\uff08 Leader \uff09\u591a\u4ece\uff08 Follower \uff09\u7684\u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ea\u8981\u534a\u6570\u4ee5\u4e0a\u7684\u8282\u70b9\uff08\u5305\u62ec Leader \u8282\u70b9\uff09\u5b58\u6d3b\uff0cZookeeper \u96c6\u7fa4\u5c31\u80fd\u6b63\u5e38\u670d\u52a1\u3002\u5c31\u7b97\u662f Leader \u8282\u70b9\u6302\u6389\u4e86\uff0cZookeeper \u4e5f\u4f1a\u8fdb\u884c\u5d29\u6e83\u6062\u590d\uff0c\u6240\u8bf4 Zookeeper \u96c6\u7fa4\u672c\u8eab\u662f\u9ad8\u53ef\u7528\u7684\uff1b Zookeeper \u96c6\u7fa4\u7684\u6570\u636e\u5177\u6709\u5168\u5c40\u4e00\u81f4\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65e0\u8bba\u5ba2\u6237\u7aef\u8fde\u63a5\u5230 Zookeeper \u96c6\u7fa4\u7684\u54ea\u4e00\u4e2a\u4ece\u8282\u70b9\uff0c\u83b7\u53d6\u7684\u6570\u636e\u90fd\u662f\u4e00\u81f4\u7684\uff1b \u5728 Zookeeper \u96c6\u7fa4\u8282\u70b9\u8fdb\u884c\u6570\u636e\u540c\u6b65\u66f4\u65b0\u65f6\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\u6240\u4ee5 Zookeeper \u7684\u6570\u636e\u66f4\u65b0\u5177\u6709\u539f\u5b50\u6027\uff1b \u5728\u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\u5bf9 Zookeeper \u8282\u70b9\u8fdb\u884c\u66f4\u65b0\u8bf7\u6c42\u64cd\u4f5c\u65f6\uff0c\u4f1a\u6839\u636e\u53d1\u9001\u7684\u987a\u5e8f\u4f9d\u6b21\u53bb\u6267\u884c\uff1b \u7531\u4e8e Zookeeper \u80fd\u5b58\u50a8\u7684\u6570\u636e\u91cf\u975e\u5e38\u5c0f\uff0c\u6240\u4ee5\u6570\u636e\u7684\u540c\u6b65\u66f4\u65b0\u4e5f\u4f1a\u975e\u5e38\u5feb\u3002\u4e5f\u5c31\u53ef\u4ee5\u8bf4\u5728\u4e00\u5b9a\u65f6\u95f4\u6bb5\u5185\uff0c\u5ba2\u6237\u7aef\u83b7\u53d6\u7684\u6570\u636e\u662f\u5b9e\u65f6\u7684 zookeeper\u4f7f\u7528\u573a\u666f \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0 \u5f53\u6211\u4eec\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u589e\u52a0\u4e86\u4e00\u4e2a\u670d\u52a1\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5229\u7528 Znode \u548c Watcher\uff0c\u8ba9\u5b83\u6ce8\u518c\u5230 Zookeeper \u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5bf9\u8fd9\u4e2a\u670d\u52a1\u8fdb\u884c\u7ba1\u7406\uff1b \u5206\u5e03\u5f0f\u9501 \u4e3a\u4e86\u9632\u6b62\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\uff0c\u670d\u52a1\u4e2d\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u4e92\u76f8\u5e72\u6270\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 Zookeeper \u7684\u4e34\u65f6\u987a\u5e8f\u8282\u70b9\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\uff0c\u5bf9\u8fd9\u4e9b\u8fdb\u7a0b\u8fdb\u884c\u8c03\u5ea6\uff0c\u8ba9\u5b83\u4eec\u987a\u5e8f\u6267\u884c\uff1b \u914d\u7f6e\u7ba1\u7406 \u6211\u4eec\u53ef\u4ee5\u628a\u6838\u5fc3\u7684\u914d\u7f6e\u6587\u4ef6\u4ea4\u7ed9 Zookeeper \u7ba1\u7406\u3002\u5f53\u6211\u4eec\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u65f6\uff0cZookeeper \u5c31\u4f1a\u628a\u914d\u7f6e\u6587\u4ef6\u7684\u4fe1\u606f\u540c\u6b65\u5230\u96c6\u7fa4\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e2d\u53bb","title":"\u4ecb\u7ecd"},{"location":"third/zktool/#zookeeper_1","text":"\u5efa\u8bae\u4f7f\u7528Docker\u5b89\u88c5 # \u62c9\u53d6 zookeeper \u955c\u50cf docker pull zookeeper # run \u542f\u52a8\uff0c-d \u540e\u53f0\u8fd0\u884c\uff0c--name \u522b\u540d\uff0c-p \u7aef\u53e3\u6620\u5c04\uff08\u53ef\u4ee5\u5199\u591a\u4e2a\uff09\uff0c \u5bb9\u5668\u540d\u79f0:\u7248\u672c\uff08\u4e0d\u5199\u9ed8\u8ba4latest\uff09 docker run -d --name=zookeeper -p 2181:2181 zookeeper","title":"\u642d\u5efazookeeper\u670d\u52a1\u5668"},{"location":"third/zktool/#zk","text":"\u5efa\u8bae\u4f7f\u7528PrettyZoo\uff0c \u4e0b\u8f7d\u5730\u5740","title":"zk\u53ef\u89c6\u5316\u7ba1\u7406\u5de5\u5177"},{"location":"third/zktool/#curator","text":"Curator \u662f Netflix \u516c\u53f8\u5f00\u6e90\u7684\u4e00\u5957 Zookeeper \u5ba2\u6237\u7aef\u6846\u67b6, Curator \u63d0\u4f9b\u4e86\u4e00\u5957\u6613\u7528\u6027\u548c\u53ef\u8bfb\u6027\u66f4\u5f3a\u7684 Fluent \u98ce\u683c\u7684\u5ba2\u6237\u7aef API \uff0c \u8fd8\u63d0\u4f9b\u4e86 Zookeeper \u5404\u79cd\u5e94\u7528\u573a\u666f\u7684\u62bd\u8c61\u5c01\u88c5\uff0c \u6bd4\u5982\uff1a\u5206\u5e03\u5f0f\u9501\u670d\u52a1\u3001\u96c6\u7fa4\u9886\u5bfc\u9009\u4e3e\u3001\u5171\u4eab\u8ba1\u6570\u5668\u3001\u7f13\u5b58\u673a\u5236\u3001\u5206\u5e03\u5f0f\u961f\u5217\u7b49","title":"Curator"},{"location":"third/zktool/#pom","text":"<dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-framework</artifactId> <version>5.1.0</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-recipes</artifactId> <version>5.1.0</version> </dependency>","title":"POM\u914d\u7f6e"},{"location":"third/zktool/#properties","text":"# Zookeeper \u5730\u5740 #curator.connectString=192.168.0.77:2181,192.168.0.88:2181,192.168.0.88:2181 curator.connectString=127.0.0.1:2181 # \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4 curator.sessionTimeoutMs=5000 # \u547d\u540d\u7a7a\u95f4\uff0c\u5f53\u524d\u5ba2\u6237\u7aef\u7684\u7236\u8282\u70b9,\u82e5zkServer\u6ca1\u6709imooc\u8fd9\u4e2aNode\uff0c\u5219\u672c\u9879\u76ee\u542f\u52a8\u65f6\u4f1a\u521b\u5efa\u8fd9\u4e2aNode,\u8fd9\u4e2aNode\u5c31\u662fnamespace curator.namespace=imooc # Tips\uff1a \u4f7f\u7528 curator \u65f6\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u662f\u5426\u914d\u7f6e namespace \uff0c # \u5982\u679c\u6ca1\u6709\u914d\u7f6e namespace \u7684\u8bdd\uff0c\u6211\u4eec\u4f7f\u7528 curator \u8fdb\u884c\u64cd\u4f5c\u65f6\uff0cpath \u53c2\u6570\u9700\u8981\u586b\u5199\u5168\u8def\u5f84\u3002 # \u5982\u679c\u914d\u7f6e\u4e86 namespace \uff0c\u6211\u4eec\u4f7f\u7528 curator \u65f6\uff0cCurator \u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5728 path \u524d\u52a0\u4e0a namespace","title":"properties\u914d\u7f6e"},{"location":"third/zktool/#zkclientspringboot","text":"package com.example.test22; import java.nio.charset.StandardCharsets; import java.util.List; import org.apache.curator.RetryPolicy; import org.apache.curator.framework.CuratorFramework; import org.apache.curator.framework.CuratorFrameworkFactory; import org.apache.curator.framework.imps.CuratorFrameworkState; import org.apache.curator.framework.recipes.cache.CuratorCache; import org.apache.curator.framework.recipes.cache.CuratorCacheListener; import org.apache.curator.retry.*; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.CommandLineRunner; import org.springframework.stereotype.Component; import lombok.extern.slf4j.Slf4j; @Slf4j @Component public class MyCuratorUtil implements CommandLineRunner { // Zookeeper \u670d\u52a1\u5668\u5730\u5740 @Value(\"${curator.connectString}\") private String connectString; // session \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4 @Value(\"${curator.sessionTimeoutMs}\") private int sessionTimeoutMs; // \u540d\u79f0\u7a7a\u95f4\uff1a\u5728\u64cd\u4f5c\u8282\u70b9\u65f6\uff0c\u4f1a\u4ee5 namespace \u4e3a\u7236\u8282\u70b9 @Value(\"${curator.namespace}\") private String namespace; /** * session \u91cd\u8fde\u7b56\u7565\uff0c\u4f7f\u7528\u5176\u4e2d\u4e00\u79cd\u5373\u53ef */ // RetryForever\uff1a\u95f4\u9694{\u53c2\u65701}\u6beb\u79d2\u540e\u91cd\u8fde\uff0c\u6c38\u8fdc\u91cd\u8bd5 private RetryPolicy retryForever = new RetryForever(3000); // RetryOneTime\uff1a{\u53c2\u65701}\u6beb\u79d2\u540e\u91cd\u8fde\uff0c\u53ea\u91cd\u8fde\u4e00\u6b21 private RetryPolicy retryOneTime = new RetryOneTime(3000); // RetryNTimes\uff1a {\u53c2\u65702}\u6beb\u79d2\u540e\u91cd\u8fde\uff0c\u91cd\u8fde{\u53c2\u65701}\u6b21 private RetryPolicy retryNTimes = new RetryNTimes(3, 3000); // RetryUntilElapsed\uff1a\u6bcf{\u53c2\u65702}\u6beb\u79d2\u91cd\u8fde\u4e00\u6b21\uff0c\u603b\u7b49\u5f85\u65f6\u95f4\u8d85\u8fc7{\u53c2\u65701}\u6beb\u79d2\u540e\u505c\u6b62\u91cd\u8fde private RetryPolicy retryUntilElapsed = new RetryUntilElapsed(10000, 3000); // ExponentialBackoffRetry\uff1a\u53ef\u91cd\u8fde{\u53c2\u65702}\u6b21\uff0c\u5e76\u589e\u52a0\u6bcf\u6b21\u91cd\u8fde\u4e4b\u95f4\u7684\u7761\u7720\u65f6\u95f4\uff0c\u589e\u52a0\u516c\u5f0f\u5982\u4e0b\uff1a // {\u53c2\u65701} * Math.max(1,random.nextInt(1 << ({\u53c2\u65702\uff1amaxRetries} + 1))) private RetryPolicy exponential = new ExponentialBackoffRetry(1000, 3); private CuratorFramework client = null; private CuratorCache cache3 = null; private void initZk() { // \u4f7f\u7528 CuratorFrameworkFactory \u6765\u6784\u5efa CuratorFramework client = CuratorFrameworkFactory.builder() // Zookeeper \u670d\u52a1\u5668\u5730\u5740\u5b57\u7b26\u4e32 .connectString(connectString) // session \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4 .sessionTimeoutMs(sessionTimeoutMs) // \u4f7f\u7528\u54ea\u79cd\u91cd\u8fde\u7b56\u7565 .retryPolicy(retryOneTime) // \u914d\u7f6e\u7236\u8282\u70b9 .namespace(namespace).build(); // \u5f00\u542f\u4f1a\u8bdd client.start(); log.warn(\"zk Client\u5df2\u542f\u52a8!\"); // \u6784\u5efa CuratorCache \u5b9e\u4f8b cache3 = CuratorCache.build(client, \"/\"); // \u4f7f\u7528 Fluent \u98ce\u683c\u548c lambda \u8868\u8fbe\u5f0f\u6765\u6784\u5efa CuratorCacheListener \u7684\u4e8b\u4ef6\u76d1\u542c CuratorCacheListener listener = CuratorCacheListener.builder() // \u5f00\u542f\u5bf9\u6240\u6709\u4e8b\u4ef6\u7684\u76d1\u542c // type \u4e8b\u4ef6\u7c7b\u578b\uff1aNODE_CREATED, NODE_CHANGED, NODE_DELETED; // oldNode \u539f\u8282\u70b9\uff1aChildData \u7c7b\uff0c\u5305\u62ec\u8282\u70b9\u8def\u5f84\uff0c\u8282\u70b9\u72b6\u6001 Stat\uff0c\u8282\u70b9 data // newNode \u65b0\u8282\u70b9\uff1a\u540c\u4e0a .forAll((type, oldNode, newNode) -> { log.warn(\" \u4e8b\u4ef6\u7c7b\u578b\uff1a{}\", type); log.warn(\" \u539f\u8282\u70b9\uff1a{}\", oldNode); log.warn(\" \u65b0\u8282\u70b9\uff1a{}\", newNode); }) // // \u5f00\u542f\u5bf9\u8282\u70b9\u521b\u5efa\u4e8b\u4ef6\u7684\u76d1\u542c // .forCreates(childData -> { // // log.warn(\"\u521b\u5efa\u4e86\u65b0\u8282\u70b9\uff1a{}\", childData); // // }) // // \u5f00\u542f\u5bf9\u8282\u70b9\u66f4\u65b0\u4e8b\u4ef6\u7684\u76d1\u542c // .forChanges((oldNode, newNode) -> { // log.warn(\"forChanges \u8282\u70b9\u539f\u59cb\u5185\u5bb9\uff1a{}\", oldNode); // log.warn(\"forChanges \u8282\u70b9\u66f4\u65b0\u540e\uff1a{}\", newNode); // }) // // \u5f00\u542f\u5bf9\u8282\u70b9\u5220\u9664\u4e8b\u4ef6\u7684\u76d1\u542c // .forDeletes(oldNode -> { // log.warn(\"\u5220\u9664\u4e86\u7ed3\u70b9:{}\", oldNode); // }) // \u521d\u59cb\u5316 .forInitialized(() -> { log.warn(\"CuratorCacheListener\u521d\u59cb\u5316\u5b8c\u6bd5\"); }) // \u6784\u5efa .build(); // \u6ce8\u518c CuratorCacheListener \u5230 CuratorCache cache3.listenable().addListener(listener); // CuratorCache \u5f00\u542f\u7f13\u5b58 cache3.start(); log.warn(\"zk CuratorCache\u5df2\u542f\u52a8!\"); log.warn(\"zk state:{}\", client.getState()); } @Override public void run(String... args) throws Exception { initZk(); } /** * \u7236\u8282\u70b9\u81ea\u52a8\u6389\u4e86\uff0c\u8981\u5728\u4e0b\u6b21\u64cd\u4f5c\u65f6\u6062\u590d\uff0c\u5373\u91cd\u65b0\u5efa\u7acb\u5e26zWatch \u7684 zkClient */ private void refreshZkClient() { if (client.getState() != CuratorFrameworkState.STOPPED) { cache3.close(); log.warn(\"zk CuratorCache \u5df2\u5173\u95ed!\"); client.close(); log.warn(\"zk Client \u5df2\u5173\u95ed!\"); } initZk(); log.warn(\"refreshZkClient---Completed\"); } public List<String> getAllNodeByPath(String path) throws Exception { refreshZkClient(); return client.getChildren().forPath(path); } public void createNormalNode(String path) throws Exception { refreshZkClient(); client.create().forPath(path); } public void createNodeAndData(String path, String dataStr) throws Exception { refreshZkClient(); client.create().forPath(path, dataStr.getBytes(StandardCharsets.UTF_8)); } public void updateNodeData(String path, String dataStr) throws Exception { refreshZkClient(); client.setData().forPath(path, dataStr.getBytes(StandardCharsets.UTF_8)); } public void deleteNode(String path) throws Exception { refreshZkClient(); client.delete().forPath(path); } }","title":"\u8ba9ZkClient\u968f\u7740SpringBoot\u542f\u52a8\u800c\u542f\u52a8\u7684\u7528\u6cd5"},{"location":"third/zktool/#zk_1","text":"@Autowired private MyCuratorUtil myCuratorUtil; @GetMapping(\"/testCreate\") public String testApi() throws Exception { myCuratorUtil.createNormalNode(\"/mooc\"); return testcfg; } @GetMapping(\"/findNodeList\") public String findNodeList() throws Exception { // \u67e5\u8be2\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5b50\u8282\u70b9 List<String> strings = myCuratorUtil.getAllNodeByPath(\"/t1\"); return String.valueOf(strings); } @PostMapping(\"/testCreate2\") public String testCreate2() throws Exception { myCuratorUtil.createNodeAndData(\"/mc3\", \"hello123\"); return testcfg; } @PutMapping(\"/testUpdate\") public String testUpdate() throws Exception { myCuratorUtil.updateNodeData(\"/mooc\", \"Wiki\"); return testcfg; } @DeleteMapping(\"/testDel\") public String testDel() throws Exception { //\u7236\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u5b50\u8282\u70b9-delete\u540e\uff0czk\u4f1a\u81ea\u52a8\u628a\u7236\u8282\u70b9\u4e5f\u5220\u6389 myCuratorUtil.deleteNode(\"/mooc\"); return testcfg; }","title":"\u6d4b\u8bd5zk\u7684\u4f7f\u7528"},{"location":"third/zktool/#zk_2","text":"\u9664\u4e86\u5355\u72ec\u4f7f\u7528 Zookeeper \u6765\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u3001\u914d\u7f6e\u4e2d\u5fc3\u7b49\u529f\u80fd\u5916\uff0c \u5728\u6211\u4eec\u4f7f\u7528\u4e00\u4e9b\u4f18\u79c0\u7684\u6846\u67b6\u65f6\uff0c\u6bd4\u5982\u9ad8\u6027\u80fd\u7684\u5206\u5e03\u5f0f\u6d41\u5904\u7406\u5e73\u53f0 Apache Kafka\uff0c\u9ad8\u6027\u80fd\u7684 Java RPC \u6846\u67b6 Apache Dubbo\uff0c\u5b83\u4eec\u4e5f\u4e0d\u540c\u7a0b\u5ea6\u7684\u4f9d\u8d56\u4e86 Zookeeper \u670d\u52a1\u3002","title":"zk\u5728\u7b2c\u4e09\u65b9\u6846\u67b6\u4e2d\u7684\u5e94\u7528"},{"location":"third/zktool/#zkkafka","text":"Topic \u914d\u7f6e\u7ba1\u7406\uff1a Topic \u7684\u914d\u7f6e\u4f1a\u6ce8\u518c\u5230 Zookeeper \u4e2d \u7684 config \u8282\u70b9\u4e0b\uff0c\u6839\u636e config \u8282\u70b9\u6765\u52a8\u6001\u66f4\u65b0\u914d\u7f6e\uff1b Broker \u7ba1\u7406\uff1a \u5728\u6bcf\u4e2a Broker \u542f\u52a8\u65f6\uff0c\u90fd\u4f1a\u6ce8\u518c\u5230 Zookeeper \u7684 brokers \u8282\u70b9\u4e0b\uff1b Topic \u53ca Partition \u7ba1\u7406\uff1a Topic \u4f1a\u6ce8\u518c\u5230 brokers \u8282\u70b9\u4e0b\u7684 topics \u8282\u70b9\u4e0b\uff0cPartition \u4f1a\u6ce8\u518c\u5230 Topic \u7684\u8282\u70b9\u4e0b\uff1b Producer \u8d1f\u8f7d\u5747\u8861\uff1a Producer \u5c06\u6d88\u606f\u53d1\u5e03\u5230 Topic \u65f6\uff0c\u4f1a\u6839\u636e Zookeeper \u7684 brokers \u8282\u70b9\u4e0b\u7684 Broker \u6765\u8fdb\u884c\u52a8\u6001\u7684\u8d1f\u8f7d\u5747\u8861\uff1b Consumer \u8d1f\u8f7d\u5747\u8861\uff1a Consumer \u4ece Topic \u62c9\u53d6\u6d88\u606f\u65f6\uff0c\u540c\u6837\u4e5f\u9700\u8981\u6839\u636e Zookeeper \u7684 brokers \u8282\u70b9\u4e0b\u7684 Broker \u6765\u8fdb\u884c\u52a8\u6001\u7684\u8d1f\u8f7d\u5747\u8861\uff1b \u6d88\u8d39\u7ba1\u7406\uff1a \u6bcf\u4e2a Partition \u53ea\u80fd\u88ab Consumer Group \u4e2d\u7684\u4e00\u4e2a Consumer \u8fdb\u884c\u6d88\u8d39\uff0c\u56e0\u6b64\u9700\u8981\u5173\u8054 Partition \u4e0e Consumer \u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5c06 Consumer \u7684 Consumer ID \u6ce8\u518c\u5230\u76f8\u5173\u8054\u7684 Partition \u8282\u70b9\u7684\u4e34\u65f6\u8282\u70b9\u4e0a\uff1b Offset \u8bb0\u5f55\uff1a \u5728 Consumer \u5bf9\u6307\u5b9a Partition \u8fdb\u884c\u6d88\u606f\u6d88\u8d39\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06 Partition \u7684\u6d88\u8d39\u6570\u91cf\u8bb0\u5f55\u5230 Zookeeper \u4e2d\u3002","title":"zk\u5728kafka\u4e2d\u7684\u5e94\u7528"},{"location":"third/zktool/#zkdubbo","text":"\u6839\u636e Zookeeper \u7684\u6811\u72b6\u7ed3\u6784\uff0cDubbo \u628a\u8282\u70b9\u5206\u4e3a 4 \u5c42 \u7b2c\u4e00\u5c42\u4e3a Root \u8282\u70b9\uff0c\u56fa\u5b9a\u4e3a dubbo\uff1b \u7b2c\u4e8c\u5c42\u4e3a\u670d\u52a1\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u670d\u52a1\u6765\u6ce8\u518c\u4e0d\u540c\u7684\u670d\u52a1\u8282\u70b9\uff0c\u540c\u65f6 Monitor \u4f1a\u76d1\u542c\u670d\u52a1\u8282\u70b9\uff1b \u7b2c\u4e09\u5c42\u4e3a\u670d\u52a1\u7684\u7c7b\u578b\uff0c\u5206\u522b\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u670d\u52a1\u6d88\u8d39\u8005\uff0c\u56fa\u5b9a\u4e3a providers \u548c consumers \uff1b \u7b2c\u56db\u5c42\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u670d\u52a1\u6d88\u8d39\u8005\u7684 URL\uff0c\u5982\u679c\u662f Provider \u5c31\u4f1a\u6ce8\u518c\u5230 providers \u8282\u70b9\u4e0b\u7684\u4e34\u65f6\u8282\u70b9\u3002\u5982\u679c\u662f Consumer \u5c31\u6ce8\u518c\u5230 consumers \u8282\u70b9\u4e0b\u7684\u4e34\u65f6\u8282\u70b9\uff0c\u5e76\u4e14\u5bf9\u540c\u4e00\u670d\u52a1\u4e0b\u7684 providers \u5f00\u542f\u76d1\u542c Zookeeper \u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u7684\u539f\u7406 \u670d\u52a1\u63d0\u4f9b\u8005\u628a URL \u6ce8\u518c\u5230 providers \u4e0b\u7684\u4e34\u65f6\u8282\u70b9\uff0c \u670d\u52a1\u6d88\u8d39\u8005\u4ece providers \u83b7\u53d6 URL \u5217\u8868\uff0c\u5e76\u5bf9 providers \u5f00\u542f\u5b50\u8282\u70b9\u4e8b\u4ef6\u7684\u76d1\u542c\u3002 \u6839\u636e Zookeeper \u4e34\u65f6\u8282\u70b9\u7684\u7279\u6027\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u53ea\u8981\u4e0e Zookeeper \u65ad\u5f00\u8fde\u63a5\uff0cZookeeper \u670d\u52a1\u5c31\u4f1a\u628a\u8be5\u4e34\u65f6\u8282\u70b9\u79fb\u9664\uff0c\u6b64\u65f6\u670d\u52a1\u6d88\u8d39\u8005\u5c31\u4f1a\u6536\u5230 providers \u7684\u5b50\u8282\u70b9\u79fb\u9664\u4e8b\u4ef6\uff0c\u7136\u540e\u66f4\u65b0\u81ea\u5df1\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u7684 URL \u5217\u8868","title":"zk\u5728Dubbo\u4e2d\u7684\u5e94\u7528"}]}